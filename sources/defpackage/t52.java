package defpackage;

import android.content.UriMatcher;
import com.comscore.streaming.AdvertisementType;
import com.comscore.streaming.ContentType;
import com.spotify.core.http.HttpConnection;
import com.spotify.encore.consumer.components.promo.impl.promocard.renders.BitmapRenderer;
import com.spotify.encore.foundation.R;
import com.spotify.mobile.android.spotlets.appprotocol.model.AppProtocol;
import com.spotify.mobile.android.util.LinkType;
import defpackage.s52;
import java.util.EnumMap;
import java.util.Map;

/* renamed from: t52  reason: default package */
public final class t52 {
    private static final Map<LinkType, s52> a;
    private static final UriMatcher b = new UriMatcher(-1);

    static {
        EnumMap enumMap = new EnumMap(LinkType.class);
        a = enumMap;
        LinkType linkType = LinkType.ACTIVATE;
        s52.b O = je.O("activate", "spotify:", "spotify:open", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:open)$", linkType);
        O.o(true);
        O.q(null);
        O.m("This URI causes the application to start or come forward as if opened by the user. It has no other semantics.");
        O.n("spotify:open");
        O.n("https://open.spotify.com/open");
        O.n("http://open.spotify.com/open");
        O.n("SPOTIFY:open");
        O.l("spotify:OPEN");
        enumMap.put((EnumMap) linkType, (LinkType) O.k());
        LinkType linkType2 = LinkType.ACTIVATE_PREMIUM_TRIAL;
        je.j(je.N("activate_premium_trial", "spotify:internal:activate_premium_trial", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:activate_premium_trial)$", linkType2, false), null, null, enumMap, linkType2);
        LinkType linkType3 = LinkType.AD;
        je.j(je.N("ad", "spotify:ad:{ad_id as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:ad:[^:_#]+)$", linkType3, false), null, null, enumMap, linkType3);
        LinkType linkType4 = LinkType.ADD_TO_PLAYLIST;
        je.j(je.N("add_to_playlist", "spotify:add_to_playlist", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:add_to_playlist)$", linkType4, false), null, null, enumMap, linkType4);
        LinkType linkType5 = LinkType.ADD_TO_PLAYLIST_BOTTOM_SHEET;
        je.j(je.N("add_to_playlist_bottom_sheet", "spotify:add_to_playlist_bottom_sheet", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:add_to_playlist_bottom_sheet)$", linkType5, false), null, null, enumMap, linkType5);
        LinkType linkType6 = LinkType.ADS_MIC_PERMISSIONS;
        je.j(je.N("ads_mic_permissions", "spotify:internal:ads:mic-permissions", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:ads:mic-permissions)$", linkType6, false), "Cream NASA", "Uri for user prompt for microphone permissions", enumMap, linkType6);
        LinkType linkType7 = LinkType.ALBUM;
        s52.b N = je.N("album", "spotify:album:{album_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:album:[a-zA-Z0-9]{22})$", linkType7, true);
        je.i(N, "darwin", "The overview page for a specific album", "spotify:album:4EWxPTF5Vow6tzSCXRkmoo", "spotify:album:3PqM9z7i2KWX7ZXfuSMvGG");
        N.n("https://open.spotify.com/album/3PqM9z7i2KWX7ZXfuSMvGG");
        N.l("spotify:album:");
        N.l("spotify:album:bad");
        N.l("spotify:album:3PqM9z7i2KWX7ZXfuSMv_G");
        enumMap.put((EnumMap) linkType7, (LinkType) N.k());
        LinkType linkType8 = LinkType.ALBUM_AUTOPLAY;
        s52.b bVar = new s52.b("album_autoplay");
        bVar.r("spotify:album:{album_id as Base62}:play");
        bVar.r("spotify:album:{album_id as Base62}:play:{track_id as Base62}");
        bVar.r("spotify:album:{album_id as Base62}:play:track:{track_id as Base62}");
        bVar.r("spotify:album:{album_id as Base62}:play:episode:{episode_id as Base62}");
        bVar.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:album:[a-zA-Z0-9]{22}:play|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:album:[a-zA-Z0-9]{22}:play:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:album:[a-zA-Z0-9]{22}:play:track:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:album:[a-zA-Z0-9]{22}:play:episode:[a-zA-Z0-9]{22})$");
        bVar.p(linkType8);
        bVar.o(false);
        bVar.q(null);
        bVar.m(null);
        enumMap.put((EnumMap) linkType8, (LinkType) bVar.k());
        LinkType linkType9 = LinkType.ALBUM_RADIO;
        je.j(je.N("album_radio", "spotify:radio:album:{album_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:album:[a-zA-Z0-9]{22})$", linkType9, false), null, null, enumMap, linkType9);
        LinkType linkType10 = LinkType.ALLBOARDING;
        s52.b N2 = je.N("allboarding", "spotify:internal:allboarding:origin:{entryPoint as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:allboarding:origin:[^:_#]+)$", linkType10, false);
        je.i(N2, "ignite", "Uri for the unified AllBoarding project", "spotify:internal:allboarding:origin:default", "spotify:internal:allboarding:origin:signup");
        N2.n("spotify:internal:allboarding:origin:home-artist-header");
        N2.n("spotify:internal:allboarding:origin:library-add-artists");
        N2.n("spotify:internal:allboarding:origin:debug-artist");
        N2.n("spotify:internal:allboarding:origin:debug-language");
        N2.n("spotify:internal:allboarding:origin:debug-language-artist");
        N2.n("spotify:internal:allboarding:origin:debug-opt-in-po");
        enumMap.put((EnumMap) linkType10, (LinkType) N2.k());
        LinkType linkType11 = LinkType.ANNOTATE_DISCARD_CHANGES;
        je.j(je.N("annotate_discard_changes", "spotify:annotate_discard_changes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:annotate_discard_changes)$", linkType11, false), null, null, enumMap, linkType11);
        LinkType linkType12 = LinkType.ANNOTATE_PLAYLIST;
        je.j(je.N("annotate_playlist", "spotify:annotate_playlist", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:annotate_playlist)$", linkType12, false), null, null, enumMap, linkType12);
        LinkType linkType13 = LinkType.APP_PROTOCOL;
        je.j(je.N("app_protocol", "spotify:app:appprotocol", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:appprotocol)$", linkType13, false), null, null, enumMap, linkType13);
        LinkType linkType14 = LinkType.APP_RATER;
        je.j(je.N("app_rater", "spotify:app:app_rater", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:app_rater)$", linkType14, false), null, null, enumMap, linkType14);
        LinkType linkType15 = LinkType.ARTIST;
        s52.b N3 = je.N("artist", "spotify:artist:{artist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22})$", linkType15, true);
        je.i(N3, "darwin", "The overview page for a specific artist", "spotify:artist:31TPClRtHm23RisEBtV3X7", "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN");
        N3.n("https://open.spotify.com/artist/2SHhfs4BiDxGQ3oxqf0UHY");
        N3.l("spotify:artist:");
        N3.l("spotify:artist:bad");
        N3.l("spotify:artist:5WUlDfRSoLAfcVSX1Wnr_N");
        enumMap.put((EnumMap) linkType15, (LinkType) N3.k());
        LinkType linkType16 = LinkType.ARTIST_ABOUT;
        je.j(je.N("artist_about", "spotify:artist:{artist_id as Base62}:about", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:about)$", linkType16, false), null, null, enumMap, linkType16);
        LinkType linkType17 = LinkType.ARTIST_ALBUMS;
        je.j(je.N("artist_albums", "spotify:artist:{artist_id as Base62}:albums", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:albums)$", linkType17, false), null, null, enumMap, linkType17);
        LinkType linkType18 = LinkType.ARTIST_APPEARS_ON;
        s52.b O2 = je.O("artist_appears_on", "spotify:artist:{artist_id as Base62}:appears_on", "spotify:artist:{artist_id as Base62}:appears-on", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:appears_on|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:appears-on)$", linkType18);
        O2.o(false);
        O2.q(null);
        O2.m(null);
        enumMap.put((EnumMap) linkType18, (LinkType) O2.k());
        LinkType linkType19 = LinkType.ARTIST_AUTOPLAY;
        s52.b bVar2 = new s52.b("artist_autoplay");
        bVar2.r("spotify:artist:{artist_id as Base62}:play");
        bVar2.r("spotify:artist:{artist_id as Base62}:play:{track_id as Base62}");
        bVar2.r("spotify:artist:{artist_id as Base62}:play:track:{track_id as Base62}");
        bVar2.r("spotify:artist:{artist_id as Base62}:play:episode:{episode_id as Base62}");
        bVar2.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:play|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:play:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:play:track:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:play:episode:[a-zA-Z0-9]{22})$");
        bVar2.p(linkType19);
        bVar2.o(false);
        bVar2.q(null);
        bVar2.m(null);
        enumMap.put((EnumMap) linkType19, (LinkType) bVar2.k());
        LinkType linkType20 = LinkType.ARTIST_BIOGRAPHY;
        je.j(je.N("artist_biography", "spotify:artist:{artist_id as Base62}:biography", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:biography)$", linkType20, false), null, null, enumMap, linkType20);
        LinkType linkType21 = LinkType.ARTIST_COMPILATIONS;
        je.j(je.N("artist_compilations", "spotify:artist:{artist_id as Base62}:compilations", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:compilations)$", linkType21, false), null, null, enumMap, linkType21);
        LinkType linkType22 = LinkType.ARTIST_CONCERT;
        je.j(je.N("artist_concert", "spotify:artist:{artist_id as Base62}:concert", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:concert)$", linkType22, false), null, null, enumMap, linkType22);
        LinkType linkType23 = LinkType.ARTIST_CONCERTS;
        je.j(je.N("artist_concerts", "spotify:artist:{artist_id as Base62}:concerts", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:concerts)$", linkType23, false), null, null, enumMap, linkType23);
        LinkType linkType24 = LinkType.ARTIST_GALLERY;
        je.j(je.N("artist_gallery", "spotify:artist:{artist_id as Base62}:gallery", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:gallery)$", linkType24, false), null, null, enumMap, linkType24);
        LinkType linkType25 = LinkType.ARTIST_PLAYLISTS;
        je.j(je.N("artist_playlists", "spotify:artist:{artist_id as Base62}:playlists", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:playlists)$", linkType25, false), null, null, enumMap, linkType25);
        LinkType linkType26 = LinkType.ARTIST_RADIO;
        je.j(je.N("artist_radio", "spotify:radio:artist:{artist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:artist:[a-zA-Z0-9]{22})$", linkType26, false), null, null, enumMap, linkType26);
        LinkType linkType27 = LinkType.ARTIST_RELATED;
        je.j(je.N("artist_related", "spotify:artist:{artist_id as Base62}:related", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:related)$", linkType27, false), null, null, enumMap, linkType27);
        LinkType linkType28 = LinkType.ARTIST_RELEASES;
        s52.b N4 = je.N("artist_releases", "spotify:artist:{artist_id as Base62}:releases", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:releases)$", linkType28, false);
        je.i(N4, "darwin", "A page all releases for a specific artist", "spotify:artist:31TPClRtHm23RisEBtV3X7:releases", "spotify:artist:5WUlDfRSoLAfcVSX1WnrxN:releases");
        N4.n("https://open.spotify.com/artist/2SHhfs4BiDxGQ3oxqf0UHY/releases");
        N4.l("spotify:artist::releases");
        N4.l("spotify:artist:bad:releases");
        N4.l("spotify:artist:5WUlDfRSoLAfcVSX1Wnr_N:releases");
        enumMap.put((EnumMap) linkType28, (LinkType) N4.k());
        LinkType linkType29 = LinkType.ARTIST_SINGLES;
        je.j(je.N("artist_singles", "spotify:artist:{artist_id as Base62}:singles", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:artist:[a-zA-Z0-9]{22}:singles)$", linkType29, false), null, null, enumMap, linkType29);
        LinkType linkType30 = LinkType.AUTOLOGIN;
        je.j(je.N("autologin", "spotify:autologin", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:autologin)$", linkType30, false), null, null, enumMap, linkType30);
        LinkType linkType31 = LinkType.BLEND_INVITATION;
        s52.b N5 = je.N("blend_invitation", "spotify:blend:invitation", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:blend:invitation)$", linkType31, true);
        N5.q("soundtracks");
        N5.m("The page where a user creates Blend invitation links");
        N5.n("spotify:blend:invitation");
        N5.l("spotify:blend:");
        N5.l("spotify:blend:invitation:smores");
        enumMap.put((EnumMap) linkType31, (LinkType) N5.k());
        LinkType linkType32 = LinkType.BLEND_TASTE_MATCH;
        s52.b N6 = je.N("blend_taste_match", "spotify:blend:taste-match:{taste_match_id as Hex64}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:blend:taste-match:[a-fA-F0-9]{16})$", linkType32, true);
        N6.q("soundtracks");
        N6.m("The page where a user views a Blend Taste Match screen. Which is either an invitation to a Blend or a notification that the recipient has joined the Blend.");
        N6.n("spotify:blend:taste-match:bb4e1d574e949663");
        N6.l("spotify:blend:");
        N6.l("spotify:blend:taste-match");
        N6.l("spotify:blend:taste-match:notahexstring");
        N6.l("spotify:blend:taste-match:bb4e1d574e94966a0ddba11");
        enumMap.put((EnumMap) linkType32, (LinkType) N6.k());
        LinkType linkType33 = LinkType.BROWSE_CONCERTS;
        s52.b O3 = je.O("browse_concerts", "spotify:concerts", "spotify:app:concerts", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:concerts|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:concerts)$", linkType33);
        O3.o(true);
        O3.q(null);
        O3.m("The root of the browse concerts hierarchy within Browse");
        O3.n("spotify:concerts");
        enumMap.put((EnumMap) linkType33, (LinkType) O3.k());
        LinkType linkType34 = LinkType.BROWSE_DISCOVER;
        enumMap.put((EnumMap) linkType34, (LinkType) je.P(je.N("browse_discover", "spotify:discover", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:discover)$", linkType34, true), null, "The root of the browse discover hierarchy within Browse", "spotify:discover"));
        LinkType linkType35 = LinkType.BROWSE_GENRES;
        s52.b bVar3 = new s52.b("browse_genres");
        bVar3.r("spotify:genre:{genre_slug as text}");
        bVar3.r("spotify:genre:{genre_slug as text}:{slug_b as text}");
        bVar3.r("spotify:genre:{genre_slug as text}:{slug_b as text}:{slug_c as text}");
        bVar3.r("spotify:genre:{genre_slug as text}:{slug_b as text}:{slug_c as text}:{slug_d as text}");
        bVar3.r("spotify:genre:{genre_slug as text}:{slug_b as text}:{slug_c as text}:{slug_d as text}:{slug_e as text}");
        bVar3.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:genre:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:genre:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:genre:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:genre:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:genre:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+)$");
        bVar3.p(linkType35);
        bVar3.o(true);
        bVar3.q(null);
        bVar3.m("A specific genre in the context of Browse");
        bVar3.n("spotify:genre:pop");
        bVar3.n("spotify:genre:metal");
        enumMap.put((EnumMap) linkType35, (LinkType) bVar3.k());
        LinkType linkType36 = LinkType.BROWSE_HUBS;
        s52.b bVar4 = new s52.b("browse_hubs");
        bVar4.r("spotify:page:{name as text}");
        bVar4.r("spotify:view:{name as text}");
        bVar4.r("spotify:space:{name as text}");
        bVar4.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:page:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:view:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:space:[^:_#]+)$");
        bVar4.p(linkType36);
        bVar4.o(false);
        bVar4.q(null);
        bVar4.m("Deprecated. This will redirect spotify:browse instead.");
        bVar4.n("spotify:page:monkey");
        bVar4.n("spotify:view:monkey");
        bVar4.n("spotify:space:monkey");
        enumMap.put((EnumMap) linkType36, (LinkType) bVar4.k());
        LinkType linkType37 = LinkType.BROWSE_IMAGESET;
        s52.b N7 = je.N("browse_imageset", "spotify:imageset:{imageset_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:imageset:[a-zA-Z0-9]{22})$", linkType37, false);
        N7.q(null);
        N7.m("Deprecated. This will redirect spotify:browse instead.");
        N7.n("spotify:imageset:31TPClRtHm23RisEBtV3X7");
        N7.l("spotify:imageset:");
        N7.l("spotify:imageset:bad");
        N7.l("spotify:imageset:31TPClRtHm23RisEBtV3_7");
        enumMap.put((EnumMap) linkType37, (LinkType) N7.k());
        LinkType linkType38 = LinkType.BROWSE_LINK;
        s52.b N8 = je.N("browse_link", "spotify:link:{link_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:link:[a-zA-Z0-9]{22})$", linkType38, false);
        N8.q(null);
        N8.m("Deprecated. This will redirect spotify:browse instead.");
        N8.n("spotify:link:31TPClRtHm23RisEBtV3X7");
        N8.l("spotify:link:");
        N8.l("spotify:link:bad");
        N8.l("spotify:link:31TPClRtHm23RisEBtV3_7");
        enumMap.put((EnumMap) linkType38, (LinkType) N8.k());
        LinkType linkType39 = LinkType.BROWSE_NEW_RELEASES;
        je.j(je.N("browse_new_releases", "spotify:app:browse:new_releases", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:browse:new_releases)$", linkType39, false), null, null, enumMap, linkType39);
        LinkType linkType40 = LinkType.BROWSE_RELEASES;
        enumMap.put((EnumMap) linkType40, (LinkType) je.P(je.N("browse_releases", "spotify:new-releases", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:new-releases)$", linkType40, true), null, "Deprecated. This will redirect spotify:browse instead. Use spotify:genre:new-releases", "spotify:new-releases"));
        LinkType linkType41 = LinkType.BROWSE_ROOT;
        s52.b bVar5 = new s52.b("browse_root");
        bVar5.r("spotify:browse");
        bVar5.r("spotify:app:browse");
        bVar5.r("spotify:app:browse:{slug as text}");
        bVar5.r("spotify:app:browse:{slug as text}:{slug2 as text}");
        bVar5.r("spotify:app:browse:{slug as text}:{slug2 as text}:{slug3 as text}");
        bVar5.r("spotify:app:browse:{slug as text}:{slug2 as text}:{slug3 as text}:{slug4 as text}");
        bVar5.r("spotify:app:browse:{slug as text}:{slug2 as text}:{slug3 as text}:{slug4 as text}:{slug5 as text}");
        bVar5.r("spotify:hub:browse");
        bVar5.r("spotify:hub:browse:{slug_a as text}");
        bVar5.r("spotify:hub:browse:{slug_a as text}:{slug_b as text}");
        bVar5.r("spotify:hub:browse:{slug_a as text}:{slug_b as text}:{slug_c as text}");
        bVar5.r("spotify:hub:browse:{slug_a as text}:{slug_b as text}:{slug_c as text}:{slug_d as text}");
        bVar5.r("spotify:hub:browse:{slug_a as text}:{slug_b as text}:{slug_c as text}:{slug_d as text}:{slug_e as text}");
        bVar5.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:browse|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:browse|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:browse:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:browse:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:browse:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:browse:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:browse:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:hub:browse|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:hub:browse:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:hub:browse:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:hub:browse:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:hub:browse:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:hub:browse:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+)$");
        bVar5.p(linkType41);
        bVar5.o(true);
        enumMap.put((EnumMap) linkType41, (LinkType) je.P(bVar5, null, "The root of the browse hierarchy within Browse (overview)", "spotify:browse"));
        LinkType linkType42 = LinkType.BROWSE_TOPPODCAST;
        s52.b O4 = je.O("browse_toppodcast", "spotify:internal:top-podcasts-page-v2", "spotify:top-podcasts-page-v2", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:top-podcasts-page-v2|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:top-podcasts-page-v2)$", linkType42);
        O4.o(false);
        O4.q(null);
        O4.m("Deprecated. Used to fetch top podcast page");
        O4.n("spotify:internal:top-podcasts-page-v2");
        O4.n("spotify:top-podcasts-page-v2");
        O4.l("spotify:bad:top-podcasts-page-v2");
        O4.l("spotify:top-podcasts-page-v2:");
        O4.l("spotify:internal:top-podcasts-page-v2:");
        enumMap.put((EnumMap) linkType42, (LinkType) O4.k());
        LinkType linkType43 = LinkType.CALIFORNIA;
        je.j(je.N("california", "spotify:california", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:california)$", linkType43, false), "app-arch-sto", "Experimental feature for exploring feature patterns", enumMap, linkType43);
        LinkType linkType44 = LinkType.CAR_MODE_HOME;
        s52.b N9 = je.N("car_mode_home", "spotify:car-mode:home", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:car-mode:home)$", linkType44, true);
        je.i(N9, "oldsmobile-squad", "The car mode variant of home.", "spotify:car-mode:home", "https://open.spotify.com/car-mode/home");
        N9.l("spotify:car-mode");
        N9.l("spotify:car-mode:");
        enumMap.put((EnumMap) linkType44, (LinkType) N9.k());
        LinkType linkType45 = LinkType.CARE_PACKAGE;
        s52.b N10 = je.N("care_package", "spotify:care-package", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:care-package)$", linkType45, false);
        je.i(N10, "mambas", "Root for Care Package Feature, where a user can create a small playlist to share.", "spotify:care-package", "https://open.spotify.com/care-package");
        N10.n("SPOTIFY:care-package");
        N10.l("spotify:carepackage");
        N10.l("spotify:CARE-PACKAGE");
        enumMap.put((EnumMap) linkType45, (LinkType) N10.k());
        LinkType linkType46 = LinkType.CARTHING;
        je.j(je.N("carthing", "spotify:carthing", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:carthing)$", linkType46, false), "daytona500", "Configuration of Superbird device", enumMap, linkType46);
        LinkType linkType47 = LinkType.CATEGORIES_ONBOARDING;
        enumMap.put((EnumMap) linkType47, (LinkType) je.P(je.N("categories_onboarding", "spotify:internal:categories-onboarding", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:categories-onboarding)$", linkType47, false), "ignite", "Uri for the categories onboarding experiment", "spotify:internal:categories-onboarding"));
        LinkType linkType48 = LinkType.CHARTS_ALBUM_SPECIFIC;
        s52.b N11 = je.N("charts_album_specific", "spotify:charts:album:{set_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:charts:album:[a-zA-Z0-9]{22})$", linkType48, true);
        je.i(N11, null, "Album charts", "spotify:charts:album:6o9o1UphRtyv10VPuDT80D", "spotify:charts:album:4rcbQSKQHID0UdZzODxg2Y");
        N11.l("spotify:charts:album:");
        N11.l("spotify:chart:album");
        N11.l("spotify:charts:album:111111");
        enumMap.put((EnumMap) linkType48, (LinkType) N11.k());
        LinkType linkType49 = LinkType.CHARTS_ROOT;
        s52.b O5 = je.O("charts_root", "spotify:charts", "spotify:charts:root", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:charts|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:charts:root)$", linkType49);
        O5.o(true);
        O5.q(null);
        O5.m("The root of the browse charts hierarchy");
        O5.n("spotify:charts");
        enumMap.put((EnumMap) linkType49, (LinkType) O5.k());
        Map<LinkType, s52> map = a;
        LinkType linkType50 = LinkType.CHARTS_SPECIFIC;
        s52.b O6 = je.O("charts_specific", "spotify:chart:{set_id as Base62}", "spotify:app:chart:{set_id as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:chart:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:chart:[^:_#]+)$", linkType50);
        O6.o(true);
        O6.q(null);
        O6.m("A specific chart");
        O6.n("spotify:chart:6o9o1UphRtyv10VPuDT80D");
        O6.n("spotify:chart:4rcbQSKQHID0UdZzODxg2Y");
        O6.l("spotify:chart:");
        O6.l("spotify:chart:bad");
        O6.l("spotify:chart:6o9o1UphRtyv10VPuDT8_D");
        map.put(linkType50, O6.k());
        LinkType linkType51 = LinkType.CHARTS_SUBPAGE;
        s52.b N12 = je.N("charts_subpage", "spotify:charts:{group_slug as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:charts:[^:_#]+)$", linkType51, true);
        je.i(N12, null, "A specific subpage for a chart", "spotify:charts:regional", "spotify:charts:viral");
        N12.n("spotify:charts:albums");
        map.put(linkType51, N12.k());
        LinkType linkType52 = LinkType.CHURN_LOCKED_STATE;
        je.k(je.N("churn_locked_state", "spotify:churn_locked_state", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:churn_locked_state)$", linkType52, false), null, null, map, linkType52);
        LinkType linkType53 = LinkType.CLUSTER;
        je.k(je.N("cluster", "spotify:user:{user_name as Username}:cluster:{gid as GidID}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:cluster:[^:?#]+)$", linkType53, false), null, null, map, linkType53);
        LinkType linkType54 = LinkType.CLUSTER_STATIONS_ROOT;
        je.k(je.N("cluster_stations_root", "spotify:station:user:{user_name as Username}:clusters", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:clusters)$", linkType54, false), null, null, map, linkType54);
        LinkType linkType55 = LinkType.COLLECTION_ALBUM;
        je.k(je.N("collection_album", "spotify:user:{username as Username}:collection:album:{album_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:collection:album:[a-zA-Z0-9]{22})$", linkType55, false), null, null, map, linkType55);
        LinkType linkType56 = LinkType.COLLECTION_ALBUM_OVERVIEW;
        s52.b O7 = je.O("collection_album_overview", "spotify:collection:albums", "spotify:internal:collection:albums", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:albums|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:albums)$", linkType56);
        O7.o(true);
        O7.q("billy");
        O7.m("The album overview page in Your Library.");
        O7.n("spotify:collection:albums");
        map.put(linkType56, O7.k());
        LinkType linkType57 = LinkType.COLLECTION_ARTIST;
        je.k(je.N("collection_artist", "spotify:user:{user_name as Username}:collection:artist:{artist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:collection:artist:[a-zA-Z0-9]{22})$", linkType57, false), null, null, map, linkType57);
        LinkType linkType58 = LinkType.COLLECTION_ARTIST_OVERVIEW;
        s52.b O8 = je.O("collection_artist_overview", "spotify:collection:artists", "spotify:internal:collection:artists", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:artists|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:artists)$", linkType58);
        O8.o(true);
        O8.q("billy");
        O8.m("The artist overview page in Your Library.");
        O8.n("spotify:collection:artists");
        map.put(linkType58, O8.k());
        LinkType linkType59 = LinkType.COLLECTION_LISTENLATER_EPISODES;
        map.put(linkType59, je.P(je.N("collection_listenlater_episodes", "spotify:collection:listen-later-episodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:listen-later-episodes)$", linkType59, true), "spoderman", "A page containing a list of user saved episodes in Your Library.", "spotify:collection:listen-later-episodes"));
        LinkType linkType60 = LinkType.COLLECTION_NFT_MADE_FOR_YOU;
        je.k(je.N("collection_nft_made_for_you", "spotify:collection:nft-made-for-you", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:nft-made-for-you)$", linkType60, false), null, null, map, linkType60);
        LinkType linkType61 = LinkType.COLLECTION_OFFLINE_EPISODES;
        map.put(linkType61, je.P(je.N("collection_offline_episodes", "spotify:collection:offline-episodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:offline-episodes)$", linkType61, true), "spoderman", "The page in Your Library with a list of downloaded podcasts.", "spotify:collection:offline-episodes"));
        LinkType linkType62 = LinkType.COLLECTION_OFFLINE_LIBRARY;
        map.put(linkType62, je.P(je.N("collection_offline_library", "spotify:offline-library", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:offline-library)$", linkType62, true), "billy", "The page in Your Library with a list of downloaded albums and playlists.", "spotify:offline-library"));
        LinkType linkType63 = LinkType.COLLECTION_OFFLINE_PODCASTS_EPISODES;
        s52.b O9 = je.O("collection_offline_podcasts_episodes", "spotify:collection:podcasts:offline", "spotify:internal:collection:podcasts:offline", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:podcasts:offline|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:podcasts:offline)$", linkType63);
        O9.o(true);
        O9.q("spoderman");
        O9.m("Page to see all your Downloaded Podcasts episodes.");
        O9.n("spotify:collection:podcasts:offline");
        map.put(linkType63, O9.k());
        LinkType linkType64 = LinkType.COLLECTION_OFFLINED_EPISODES;
        s52.b O10 = je.O("collection_offlined_episodes", "spotify:collection:offlined-episodes", "spotify:internal:collection:offlined-episodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:offlined-episodes|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:offlined-episodes)$", linkType64);
        O10.o(false);
        O10.q(null);
        O10.m(null);
        map.put(linkType64, O10.k());
        LinkType linkType65 = LinkType.COLLECTION_PLAYLIST_FOLDER;
        s52.b N13 = je.N("collection_playlist_folder", "spotify:user:{user_name as Username}:folder:{folder_id as Hex64}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:folder:[a-fA-F0-9]{16})$", linkType65, false);
        je.i(N13, null, null, "spotify:user:sill_liblive_heavy:folder:0000000000000000", "spotify:user:sill_liblive_heavy:folder:ffffffaBcDeFffff");
        N13.l("spotify:user:sill_liblive_heavy:folder:00000000");
        N13.l("spotify:user:sill_liblive_heavy:folder:thisisnotvalid");
        map.put(linkType65, N13.k());
        LinkType linkType66 = LinkType.COLLECTION_PODCASTS;
        map.put(linkType66, je.P(je.N("collection_podcasts", "spotify:collection:podcasts", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:podcasts)$", linkType66, true), "spoderman", "A podcasts (only) overview page in Your Library.", "spotify:collection:podcasts"));
        LinkType linkType67 = LinkType.COLLECTION_PODCASTS_DOWNLOADS;
        map.put(linkType67, je.P(je.N("collection_podcasts_downloads", "spotify:collection:podcasts:downloads", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:podcasts:downloads)$", linkType67, true), "spoderman", "Page to see all your Downloaded Podcasts episodes.", "spotify:collection:podcasts:downloads"));
        LinkType linkType68 = LinkType.COLLECTION_PODCASTS_EPISODES;
        map.put(linkType68, je.P(je.N("collection_podcasts_episodes", "spotify:collection:podcasts:episodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:podcasts:episodes)$", linkType68, true), "spoderman", "A dedicated page containing both unfinished and unplayed episodes", "spotify:collection:podcasts:episodes"));
        LinkType linkType69 = LinkType.COLLECTION_PODCASTS_EPISODES_UNFINISHED;
        map.put(linkType69, je.P(je.N("collection_podcasts_episodes_unfinished", "spotify:collection:podcasts:unfinished", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:podcasts:unfinished)$", linkType69, true), "spoderman", "Page to see the unfinished episodes (started, but not finished until the end) of Podcasts you follow in Your Library", "spotify:collection:podcasts:unfinished"));
        LinkType linkType70 = LinkType.COLLECTION_PODCASTS_FOLLOWING;
        map.put(linkType70, je.P(je.N("collection_podcasts_following", "spotify:collection:podcasts:following", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:podcasts:following)$", linkType70, true), "spoderman", "A dedicated page containing all podcasts that the user is following", "spotify:collection:podcasts:following"));
        LinkType linkType71 = LinkType.COLLECTION_RADIO;
        s52.b O11 = je.O("collection_radio", "spotify:collection:radio", "spotify:internal:collection:radio", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:radio|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:radio)$", linkType71);
        O11.o(false);
        O11.q(null);
        O11.m(null);
        map.put(linkType71, O11.k());
        LinkType linkType72 = LinkType.COLLECTION_ROOT;
        map.put(linkType72, je.P(je.N("collection_root", "spotify:collection", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection)$", linkType72, true), "billy", "The root of the Your Library page hierarchy on mobile.", "spotify:collection"));
        LinkType linkType73 = LinkType.COLLECTION_ROOTLIST;
        s52.b bVar6 = new s52.b("collection_rootlist");
        bVar6.r("spotify:playlists");
        bVar6.r("spotify:collection:playlists");
        bVar6.r("spotify:internal:collection:playlists");
        bVar6.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlists|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:playlists|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:playlists)$");
        bVar6.p(linkType73);
        bVar6.o(true);
        bVar6.q("billy");
        bVar6.m("The root of the playlist hierarchy within Your Library on mobile.");
        bVar6.n("spotify:playlists");
        map.put(linkType73, bVar6.k());
        LinkType linkType74 = LinkType.COLLECTION_SEARCH;
        map.put(linkType74, je.P(je.N("collection_search", "spotify:collection:search", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:search)$", linkType74, true), "billy", "The search page in Your Library.", "spotify:collection:search"));
        LinkType linkType75 = LinkType.COLLECTION_SHOWS;
        s52.b O12 = je.O("collection_shows", "spotify:collection:shows", "spotify:internal:collection:shows", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:shows|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:shows)$", linkType75);
        O12.o(true);
        O12.q("spoderman");
        O12.m("The podcasts overview page in Your Library.");
        O12.n("spotify:collection:shows");
        map.put(linkType75, O12.k());
        LinkType linkType76 = LinkType.COLLECTION_TRACKS;
        s52.b bVar7 = new s52.b("collection_tracks");
        bVar7.r("spotify:collection:tracks");
        bVar7.r("spotify:internal:collection:tracks");
        bVar7.r("spotify:user:{user_name as Username}:collection");
        bVar7.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:tracks|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:tracks|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:collection)$");
        bVar7.p(linkType76);
        bVar7.o(true);
        bVar7.q("loops-squad");
        bVar7.m("The list of tracks in Your Library.");
        bVar7.n("spotify:collection:tracks");
        map.put(linkType76, bVar7.k());
        LinkType linkType77 = LinkType.COLLECTION_UNPLAYED_EPISODES;
        s52.b O13 = je.O("collection_unplayed_episodes", "spotify:collection:unplayed-episodes", "spotify:internal:collection:unplayed-episodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:unplayed-episodes|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:unplayed-episodes)$", linkType77);
        O13.o(true);
        O13.q("spoderman");
        O13.m("The page in Your Library with a list of unplayed podcasts and video shows.");
        O13.n("spotify:collection:unplayed-episodes");
        map.put(linkType77, O13.k());
        LinkType linkType78 = LinkType.COLLECTION_UNPLAYED_PODCASTS_EPISODES;
        s52.b O14 = je.O("collection_unplayed_podcasts_episodes", "spotify:collection:podcasts:unplayed", "spotify:internal:collection:podcasts:unplayed", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:podcasts:unplayed|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:podcasts:unplayed)$", linkType78);
        O14.o(true);
        O14.q("spoderman");
        O14.m("Page to see the unplayed episodes of Podcasts you follow in Your Library");
        O14.n("spotify:collection:podcasts:unplayed");
        map.put(linkType78, O14.k());
        LinkType linkType79 = LinkType.COLLECTION_UNPLAYED_VIDEOS;
        s52.b O15 = je.O("collection_unplayed_videos", "spotify:collection:videos:unplayed", "spotify:internal:collection:videos:unplayed", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:videos:unplayed|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:videos:unplayed)$", linkType79);
        O15.o(true);
        O15.q("spoderman");
        O15.m("Page to see the unplayed followed videos in Your Library");
        O15.n("spotify:collection:videos:unplayed");
        map.put(linkType79, O15.k());
        LinkType linkType80 = LinkType.COLLECTION_VIDEOS;
        s52.b O16 = je.O("collection_videos", "spotify:collection:videos", "spotify:internal:collection:videos", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:videos|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:collection:videos)$", linkType80);
        O16.o(true);
        O16.q("billy");
        O16.m("A video (only) overview page in Your Library.");
        O16.n("spotify:collection:videos");
        map.put(linkType80, O16.k());
        LinkType linkType81 = LinkType.COLLECTION_YOUR_EPISODES;
        map.put(linkType81, je.P(je.N("collection_your_episodes", "spotify:collection:your-episodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:collection:your-episodes)$", linkType81, true), "loops-squad", "A page in Your Library containing a list of podcast episodes saved by the user.", "spotify:collection:your-episodes"));
        LinkType linkType82 = LinkType.COLLECTION_YOUR_EPISODES_CORE;
        s52.b N14 = je.N("collection_your_episodes_core", "spotify:user:{user_name as Username}:collection:your-episodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:collection:your-episodes)$", linkType82, true);
        N14.q("loops-squad");
        N14.m("The uri representing users saved Episodes in a core context, saved episodes are presented in a page in Your Library.");
        N14.n("spotify:user:daniel:collection:your-episodes");
        N14.l("spotify:user:X");
        N14.l("spotify:user::collection");
        N14.l("spotify:collection:your-episodes");
        map.put(linkType82, N14.k());
        LinkType linkType83 = LinkType.CONCAT;
        je.k(je.N("concat", "spotify:concat", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:concat)$", linkType83, false), null, null, map, linkType83);
        LinkType linkType84 = LinkType.CONCERT_ENTITY;
        s52.b O17 = je.O("concert_entity", "spotify:concert:{id as text}", "spotify:concert:songkick:events:{id as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:concert:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:concert:songkick:events:[^:_#]+)$", linkType84);
        O17.o(false);
        O17.q(null);
        O17.m(null);
        O17.n("spotify:concert:monkey");
        O17.n("spotify:concert:songkick:events:monkey");
        O17.l("spotify:concerts:monkey");
        O17.l("spotify:concerts:songkick:events:monkey");
        map.put(linkType84, O17.k());
        LinkType linkType85 = LinkType.CONCERTS_LOCATION_SEARCH;
        je.k(je.N("concerts_location_search", "spotify:concerts:location-search", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:concerts:location-search)$", linkType85, false), null, null, map, linkType85);
        LinkType linkType86 = LinkType.CONCERTS_WEBVIEW;
        je.k(je.N("concerts_webview", "spotify:internal:concerts:webview", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:concerts:webview)$", linkType86, false), null, null, map, linkType86);
        LinkType linkType87 = LinkType.CONFIG;
        je.k(je.N("config", "spotify:internal:preferences", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:preferences)$", linkType87, false), null, null, map, linkType87);
        LinkType linkType88 = LinkType.CONFIG_CONTENT_LANGUAGES;
        je.k(je.N("config_content_languages", "spotify:internal:preferences:content_languages", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:preferences:content_languages)$", linkType88, false), null, null, map, linkType88);
        LinkType linkType89 = LinkType.CONFIG_PUSH_NOTIFICATION;
        je.k(je.N("config_push_notification", "spotify:internal:preferences:push_notification", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:preferences:push_notification)$", linkType89, false), null, null, map, linkType89);
        LinkType linkType90 = LinkType.CONFIG_SAVED_ADS;
        je.k(je.N("config_saved_ads", "spotify:internal:preferences:saved_ads", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:preferences:saved_ads)$", linkType90, false), "Cream F1", "uri for bookmarked ads hub", map, linkType90);
        LinkType linkType91 = LinkType.CONFIG_STORAGE;
        je.k(je.N("config_storage", "spotify:internal:preferences:storage", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:preferences:storage)$", linkType91, false), null, null, map, linkType91);
        LinkType linkType92 = LinkType.CONFIRM_DELETION;
        je.k(je.N("confirm_deletion", "spotify:confirm_deletion", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:confirm_deletion)$", linkType92, false), null, null, map, linkType92);
        LinkType linkType93 = LinkType.CONNECT;
        je.k(je.N("connect", "spotify:internal:gaia", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:gaia)$", linkType93, false), null, null, map, linkType93);
        LinkType linkType94 = LinkType.CONNECT_DEVICE_PICKER;
        je.k(je.N("connect_device_picker", "spotify:internal:gaia-picker", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:gaia-picker)$", linkType94, false), null, null, map, linkType94);
        LinkType linkType95 = LinkType.CONNECT_DEVICE_PICKER_MENU;
        je.k(je.N("connect_device_picker_menu", "spotify:internal:gaia-picker-device-menu", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:gaia-picker-device-menu)$", linkType95, false), null, null, map, linkType95);
        LinkType linkType96 = LinkType.CONNECT_ONBOARDING_CONTROL;
        je.k(je.N("connect_onboarding_control", "spotify:internal:gaia-onboarding-disabled", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:gaia-onboarding-disabled)$", linkType96, false), null, null, map, linkType96);
        LinkType linkType97 = LinkType.CONNECT_ONBOARDING_POPUP;
        je.k(je.N("connect_onboarding_popup", "spotify:internal:gaia-onboarding-popup", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:gaia-onboarding-popup)$", linkType97, false), null, null, map, linkType97);
        LinkType linkType98 = LinkType.CONNECT_ONBOARDING_POPUP_EDUCATIONAL;
        je.k(je.N("connect_onboarding_popup_educational", "spotify:internal:gaia-onboarding-popup-educational", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:gaia-onboarding-popup-educational)$", linkType98, false), null, null, map, linkType98);
        LinkType linkType99 = LinkType.CONNECT_TRANSFER_POPUP;
        je.k(je.N("connect_transfer_popup", "spotify:internal:gaia-popup", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:gaia-popup)$", linkType99, false), null, null, map, linkType99);
        Map<LinkType, s52> map2 = a;
        LinkType linkType100 = LinkType.CREATE_RENAME_PLAYLIST;
        je.k(je.N("create_rename_playlist", "spotify:create_rename_playlist", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:create_rename_playlist)$", linkType100, false), null, null, map2, linkType100);
        LinkType linkType101 = LinkType.CYOA;
        s52.b O18 = je.O("cyoa", "spotify:cyoa:home", "spotify:cyoa:{game_id as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:cyoa:home|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:cyoa:[^:_#]+)$", linkType101);
        O18.o(false);
        O18.q("opus-squad");
        O18.m("Uris for Create Your Own Adventure");
        map2.put(linkType101, O18.k());
        LinkType linkType102 = LinkType.DAILY_MIX_HUB;
        je.k(je.N("daily_mix_hub", "spotify:daily-mix-hub", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:daily-mix-hub)$", linkType102, false), "montage", "Uri for the Daily Mix Hub", map2, linkType102);
        LinkType linkType103 = LinkType.DAILYMIX;
        je.k(je.N("dailymix", "spotify:dailymix:{gid as GidID}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:dailymix:[^:?#]+)$", linkType103, false), "montage", "Uri for dailymix", map2, linkType103);
        LinkType linkType104 = LinkType.DATA_SAVER_LEARN_MORE;
        je.k(je.N("data_saver_learn_more", "spotify:internal:data-saver-learn-more", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:data-saver-learn-more)$", linkType104, false), "Override", "Uri for Learn More overlay for Data Saver", map2, linkType104);
        LinkType linkType105 = LinkType.DATA_SAVER_OPT_IN;
        je.k(je.N("data_saver_opt_in", "spotify:internal:data-saver-opt-in", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:data-saver-opt-in)$", linkType105, false), "Override", "Uri for Status overlay for Data Saver", map2, linkType105);
        LinkType linkType106 = LinkType.DEBUG;
        s52.b O19 = je.O("debug", "spotify:internal:debug", "spotify:internal:debug:{debug_text as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:debug|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:debug:[^:_#]+)$", linkType106);
        O19.o(false);
        O19.q(null);
        O19.m(null);
        map2.put(linkType106, O19.k());
        LinkType linkType107 = LinkType.DELETING_CACHE_DIALOG;
        je.k(je.N("deleting_cache_dialog", "spotify:deleting_cache_dialog", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:deleting_cache_dialog)$", linkType107, false), null, null, map2, linkType107);
        LinkType linkType108 = LinkType.DEVICES;
        je.k(je.N("devices", "spotify:internal:devices", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:devices)$", linkType108, false), null, null, map2, linkType108);
        LinkType linkType109 = LinkType.DISABLE_OFFLINE_MODE;
        je.k(je.N("disable_offline_mode", "spotify:login:disable_offline_mode", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:login:disable_offline_mode)$", linkType109, false), null, null, map2, linkType109);
        LinkType linkType110 = LinkType.DISK_ALMOST_FULL;
        je.k(je.N("disk_almost_full", "spotify:disk_almost_full", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:disk_almost_full)$", linkType110, false), null, null, map2, linkType110);
        LinkType linkType111 = LinkType.DRIVING_MODE;
        je.k(je.N("driving_mode", "spotify:driving", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:driving)$", linkType111, false), null, null, map2, linkType111);
        LinkType linkType112 = LinkType.DUMMY;
        je.k(je.N("dummy", "spotify:internal:dummy", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:dummy)$", linkType112, false), null, null, map2, linkType112);
        LinkType linkType113 = LinkType.DYNAMIC_UPSELL;
        je.k(je.N("dynamic_upsell", "spotify:dynamic_upsell", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:dynamic_upsell)$", linkType113, false), null, null, map2, linkType113);
        LinkType linkType114 = LinkType.EMPLOYEE_PODCASTS;
        je.k(je.N("employee_podcasts", "spotify:config:employee-podcasts", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:config:employee-podcasts)$", linkType114, false), "interpods", "Configuring the Spotify Employee Podcasts", map2, linkType114);
        LinkType linkType115 = LinkType.EMPLOYEE_PODCASTS_AUTH;
        je.k(je.N("employee_podcasts_auth", "spotify:employee-podcasts:auth-callback:{auth_code as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:employee-podcasts:auth-callback:[^:_#]+)$", linkType115, false), "interpods", "Auth Handler for the Spotify Employee Podcasts", map2, linkType115);
        LinkType linkType116 = LinkType.EPISODE_AUTOPLAY;
        je.k(je.N("episode_autoplay", "spotify:episode:{episode_id as Base62}:play", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:episode:[a-zA-Z0-9]{22}:play)$", linkType116, false), null, null, map2, linkType116);
        LinkType linkType117 = LinkType.EPISODE_PREVIEW_PLAYER;
        s52.b O20 = je.O("episode_preview_player", "spotify:episode:preview:player", "spotify:episode:preview:player:{playlist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:episode:preview:player|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:episode:preview:player:[a-zA-Z0-9]{22})$", linkType117);
        O20.o(false);
        O20.q(null);
        O20.m("A page where the user sees when attempting to play a preview");
        O20.n("spotify:episode:preview:player");
        O20.n("spotify:episode:preview:player:1N14ZPZmu4sw62Ry5WnRyS");
        O20.l("spotify:episode:preview:player:ABCDEFABCDEFABCD");
        O20.l("spotify:episode:preview:player:bad");
        map2.put(linkType117, O20.k());
        LinkType linkType118 = LinkType.EPISODE_PREVIEW_PLAYLIST;
        s52.b O21 = je.O("episode_preview_playlist", "spotify:episode:preview:playlist", "spotify:episode:preview:playlist:{playlist_id as Hex64}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:episode:preview:playlist|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:episode:preview:playlist:[a-fA-F0-9]{16})$", linkType118);
        O21.o(false);
        O21.q(null);
        O21.m("A page where the user can see a playlist of episode previews");
        O21.n("spotify:episode:preview:playlist:1234567890123456");
        O21.n("spotify:episode:preview:playlist:ABCDEFABCDEFABCD");
        O21.l("spotify:episode:preview:playlist:G");
        map2.put(linkType118, O21.k());
        LinkType linkType119 = LinkType.EVENTS_CONCERT_GROUP;
        je.k(je.N("events_concert_group", "spotify:app:concerts:concert-group", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:concerts:concert-group)$", linkType119, false), null, null, map2, linkType119);
        LinkType linkType120 = LinkType.EVENTSENDER;
        je.k(je.N("eventsender", "spotify:eventsender", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:eventsender)$", linkType120, false), "voxel", "Uri for Voxels hidden view to test the integration with new app", map2, linkType120);
        LinkType linkType121 = LinkType.FIND;
        s52.b O22 = je.O("find", "spotify:find", "spotify:find:{category as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:find|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:find:[^:_#]+)$", linkType121);
        O22.o(false);
        O22.q("waldo");
        O22.m("Uri for a page with merged Search and Browse content");
        map2.put(linkType121, O22.k());
        LinkType linkType122 = LinkType.FINDFRIENDS;
        s52.b O23 = je.O("findfriends", "spotify:findfriends", "spotify:app:findfriends", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:findfriends|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:findfriends)$", linkType122);
        O23.o(false);
        O23.q(null);
        O23.m(null);
        map2.put(linkType122, O23.k());
        LinkType linkType123 = LinkType.FOLLOWFEED;
        je.k(je.N("followfeed", "spotify:followfeed", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:followfeed)$", linkType123, false), "oz", "Uri for the follow feed feature.", map2, linkType123);
        LinkType linkType124 = LinkType.FOREVER_FAVORITES;
        s52.b N15 = je.N("forever_favorites", "spotify:forever-favorites", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:forever-favorites)$", linkType124, true);
        je.i(N15, "mambas", "Root for Forever Favorites Feature, a fallback of the carepackage above.", "spotify:forever-favorites", "https://open.spotify.com/forever-favorites");
        N15.n("SPOTIFY:forever-favorites");
        N15.l("spotify:foreverfavorites");
        N15.l("spotify:FOREVER-FAVORITES");
        map2.put(linkType124, N15.k());
        LinkType linkType125 = LinkType.FORMAT_LIST_CHART;
        s52.b bVar8 = new s52.b("format_list_chart");
        bVar8.r("spotify:internal:format_list_chart:toplist");
        bVar8.r("spotify:internal:format_list_chart:spotify:playlist:{playlist_id as Base62}");
        bVar8.r("spotify:internal:format_list_chart:spotify:user:{user_name as Username}");
        bVar8.r("spotify:internal:format_list_chart:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}");
        bVar8.r("spotify:internal:format_list_chart:spotify:user:{user_name as Username}:top:tracks");
        bVar8.r("spotify:internal:format_list_chart:spotify:user:{user_name as Username}:toplist");
        bVar8.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:toplist|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:top:tracks|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:toplist)$");
        bVar8.p(linkType125);
        bVar8.o(false);
        bVar8.q(null);
        bVar8.m(null);
        map2.put(linkType125, bVar8.k());
        LinkType linkType126 = LinkType.FORMAT_LIST_CHART_AUTOPLAY;
        s52.b bVar9 = new s52.b("format_list_chart_autoplay");
        bVar9.r("spotify:internal:format_list_chart:spotify:playlist:{playlist_id as Base62}:play");
        bVar9.r("spotify:internal:format_list_chart:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}:play");
        bVar9.r("spotify:internal:format_list_chart:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}:play:track:{track_id as Base62}");
        bVar9.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}:play|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}:play|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_chart:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}:play:track:[a-zA-Z0-9]{22})$");
        bVar9.p(linkType126);
        bVar9.o(false);
        bVar9.q(null);
        bVar9.m(null);
        map2.put(linkType126, bVar9.k());
        LinkType linkType127 = LinkType.FORMAT_LIST_DATA_SAVER;
        s52.b O24 = je.O("format_list_data_saver", "spotify:internal:format_list_data_saver:spotify:playlist:{playlist_id as Base62}", "spotify:internal:format_list_data_saver:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_data_saver:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_data_saver:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22})$", linkType127);
        O24.o(false);
        O24.q(null);
        O24.m(null);
        map2.put(linkType127, O24.k());
        LinkType linkType128 = LinkType.FORMAT_LIST_HOME_MIX;
        s52.b bVar10 = new s52.b("format_list_home_mix");
        bVar10.r("spotify:internal:format_list_home_mix:spotify:playlist:{playlist_id as Base62}");
        bVar10.r("spotify:internal:format_list_home_mix:spotify:user:{user_name as Username}");
        bVar10.r("spotify:internal:format_list_home_mix:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}");
        bVar10.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_home_mix:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_home_mix:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_home_mix:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22})$");
        bVar10.p(linkType128);
        bVar10.o(false);
        bVar10.q(null);
        bVar10.m(null);
        map2.put(linkType128, bVar10.k());
        LinkType linkType129 = LinkType.FORMAT_LIST_PERSONALIZED_SETS;
        s52.b bVar11 = new s52.b("format_list_personalized_sets");
        bVar11.r("spotify:internal:format_list_personalized_sets:toplist");
        bVar11.r("spotify:internal:format_list_personalized_sets:spotify:playlist:{playlist_id as Base62}");
        bVar11.r("spotify:internal:format_list_personalized_sets:spotify:user:{user_name as Username}");
        bVar11.r("spotify:internal:format_list_personalized_sets:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}");
        bVar11.r("spotify:internal:format_list_personalized_sets:spotify:user:{user_name as Username}:top:tracks");
        bVar11.r("spotify:internal:format_list_personalized_sets:spotify:user:{user_name as Username}:toplist");
        bVar11.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:toplist|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:top:tracks|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:toplist)$");
        bVar11.p(linkType129);
        bVar11.o(false);
        bVar11.q(null);
        bVar11.m(null);
        map2.put(linkType129, bVar11.k());
        LinkType linkType130 = LinkType.FORMAT_LIST_PERSONALIZED_SETS_AUTOPLAY;
        s52.b bVar12 = new s52.b("format_list_personalized_sets_autoplay");
        bVar12.r("spotify:internal:format_list_personalized_sets:spotify:playlist:{playlist_id as Base62}:play");
        bVar12.r("spotify:internal:format_list_personalized_sets:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}:play");
        bVar12.r("spotify:internal:format_list_personalized_sets:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}:play:track:{track_id as Base62}");
        bVar12.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}:play|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}:play|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:format_list_personalized_sets:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}:play:track:[a-zA-Z0-9]{22})$");
        bVar12.p(linkType130);
        bVar12.o(false);
        bVar12.q(null);
        bVar12.m(null);
        map2.put(linkType130, bVar12.k());
        LinkType linkType131 = LinkType.FULLSCREEN_VIDEO_PLAYER;
        je.k(je.N("fullscreen_video_player", "spotify:fullscreen_videoplayer", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:fullscreen_videoplayer)$", linkType131, false), null, null, map2, linkType131);
        LinkType linkType132 = LinkType.GENRE_RADIO;
        je.k(je.N("genre_radio", "spotify:radio:genre:{radio_slug as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:genre:[^:_#]+)$", linkType132, false), null, null, map2, linkType132);
        LinkType linkType133 = LinkType.GOLDEN_PATH;
        s52.b bVar13 = new s52.b("golden_path");
        bVar13.r("spotify:goldenpath");
        bVar13.r("spotify:goldenpath:reference-top-list");
        bVar13.r("spotify:goldenpath:toptracks");
        bVar13.r("spotify:goldenpath:goldenpathtutorialstep01");
        bVar13.r("spotify:goldenpath:goldenpathtutorialstep02");
        bVar13.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:goldenpath|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:goldenpath:reference-top-list|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:goldenpath:toptracks|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:goldenpath:goldenpathtutorialstep01|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:goldenpath:goldenpathtutorialstep02)$");
        bVar13.p(linkType133);
        bVar13.o(false);
        je.k(bVar13, "marvin", "Uris for Golden Path features", map2, linkType133);
        LinkType linkType134 = LinkType.GOLDEN_PATH_AIRPORT;
        je.k(je.N("golden_path_airport", "spotify:goldenpath:airport:top-list", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:goldenpath:airport:top-list)$", linkType134, false), "airport", "Uri for bootcamp of Airport squad", map2, linkType134);
        LinkType linkType135 = LinkType.HOME_DRILLDOWN;
        s52.b N16 = je.N("home_drilldown", "spotify:home:{page_id as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:home:[^:_#]+)$", linkType135, false);
        N16.q("homeux");
        N16.m("A drill down page for home");
        N16.n("spotify:home:made-for-you");
        N16.n("https://open.spotify.com/home/made-for-you");
        map2.put(linkType135, N16.k());
        LinkType linkType136 = LinkType.HOME_ROOT;
        s52.b bVar14 = new s52.b("home_root");
        bVar14.r("spotify:home");
        bVar14.r("spotify:startpage");
        bVar14.r("spotify:internal:startpage");
        bVar14.r("spotify:internal:home");
        bVar14.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:home|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:startpage|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:startpage|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:home)$");
        bVar14.p(linkType136);
        bVar14.o(true);
        bVar14.q("homeux");
        bVar14.m("The root of the home hierarchy (Home on mobile)");
        bVar14.n("spotify:home");
        map2.put(linkType136, bVar14.k());
        LinkType linkType137 = LinkType.IMAGE_PICKER;
        je.k(je.N("image_picker", "spotify:image-picker", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:image-picker)$", linkType137, false), "playlist-experience", "Uri for capturing images from camera and gallery", map2, linkType137);
        LinkType linkType138 = LinkType.IMAGE_RECS_ROOT;
        s52.b N17 = je.N("image_recs_root", "spotify:image-recs", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:image-recs)$", linkType138, false);
        N17.q(null);
        N17.m("The root of the image recommendation feature");
        N17.n("spotify:image-recs");
        N17.l("spotify:image-recs:foo");
        map2.put(linkType138, N17.k());
        LinkType linkType139 = LinkType.INTERNAL_ARTIST;
        s52.b N18 = je.N("internal_artist", "spotify:internal:artist:{artist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:artist:[a-zA-Z0-9]{22})$", linkType139, true);
        je.i(N18, "dac", "The DAC version of the overview page for a specific artist", "spotify:internal:artist:31TPClRtHm23RisEBtV3X7", "spotify:internal:artist:5WUlDfRSoLAfcVSX1WnrxN");
        N18.l("spotify:internal:artist:");
        N18.l("spotify:internal:artist:bad");
        N18.l("spotify:internal:artist:5WUlDfRSoLAfcVSX1Wnr_N");
        map2.put(linkType139, N18.k());
        LinkType linkType140 = LinkType.INVITE_CONFIRMATION;
        je.k(je.N("invite_confirmation", "spotify:invite:confirmation", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:invite:confirmation)$", linkType140, false), null, null, map2, linkType140);
        LinkType linkType141 = LinkType.INVITE_HAVE;
        je.k(je.N("invite_have", "spotify:invite:have-invite", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:invite:have-invite)$", linkType141, false), null, null, map2, linkType141);
        LinkType linkType142 = LinkType.INVITE_REQUEST;
        je.k(je.N("invite_request", "spotify:invite:request-invite", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:invite:request-invite)$", linkType142, false), null, null, map2, linkType142);
        LinkType linkType143 = LinkType.INVITE_START;
        je.k(je.N("invite_start", "spotify:invite:start", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:invite:start)$", linkType143, false), null, null, map2, linkType143);
        LinkType linkType144 = LinkType.LANGUAGE_AWARE_ONBOARDING;
        map2.put(linkType144, je.P(je.N("language_aware_onboarding", "spotify:internal:language-aware-onboarding", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:language-aware-onboarding)$", linkType144, false), "ignite", "Uri for Language aware onboarding (i.e., language onboarding followed by taste onboarding)", "spotify:internal:language-aware-onboarding"));
        LinkType linkType145 = LinkType.LEGAL_PRIVACYPOLICY;
        map2.put(linkType145, je.P(je.N("legal_privacypolicy", "spotify:privacy-policy", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:privacy-policy)$", linkType145, false), null, "The root of the Privacy Policy hierarchy within About", "spotify:privacy-policy"));
        LinkType linkType146 = LinkType.LEGAL_TERMS;
        map2.put(linkType146, je.P(je.N("legal_terms", "spotify:terms", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:terms)$", linkType146, false), null, "The root of the Terms and Conditions hierarchy within About", "spotify:terms"));
        LinkType linkType147 = LinkType.LICENSES;
        s52.b O25 = je.O("licenses", "spotify:licenses", "spotify:internal:licenses", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:licenses|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:licenses)$", linkType147);
        O25.o(false);
        O25.q(null);
        O25.m(null);
        map2.put(linkType147, O25.k());
        LinkType linkType148 = LinkType.LIKES_HIDDEN_CONTENT;
        je.k(je.N("likes_hidden_content", "spotify:internal:hidden-content", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:hidden-content)$", linkType148, false), "lajka", "Uri for Hidden content in Your Libary", map2, linkType148);
        LinkType linkType149 = LinkType.LISTENING_HISTORY;
        je.k(je.N("listening_history", "spotify:listening-history", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:listening-history)$", linkType149, false), null, null, map2, linkType149);
        Map<LinkType, s52> map3 = a;
        LinkType linkType150 = LinkType.LIVE_EVENT;
        s52.b N19 = je.N("live_event", "spotify:live:{event_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:live:[a-zA-Z0-9]{22})$", linkType150, true);
        N19.q("Betamax");
        N19.m("Opens a specific live event");
        N19.n("spotify:live:03OiVQrcvTCqxvRgPpX4ti");
        N19.l("spotify:live:");
        N19.l("spotify:live:bad");
        map3.put(linkType150, N19.k());
        LinkType linkType151 = LinkType.LOCAL_FILES_IMPORT;
        je.k(je.N("local_files_import", "spotify:internal:local_files_import", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:local_files_import)$", linkType151, false), null, null, map3, linkType151);
        LinkType linkType152 = LinkType.LOCAL_FILES_IMPORT_ALBUMS;
        je.k(je.N("local_files_import_albums", "spotify:internal:local_files_import:albums", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:local_files_import:albums)$", linkType152, false), null, null, map3, linkType152);
        LinkType linkType153 = LinkType.LOCAL_FILES_IMPORT_ARTISTS;
        je.k(je.N("local_files_import_artists", "spotify:internal:local_files_import:artists", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:local_files_import:artists)$", linkType153, false), null, null, map3, linkType153);
        LinkType linkType154 = LinkType.LOCAL_FILES_IMPORT_FOLDERS;
        je.k(je.N("local_files_import_folders", "spotify:internal:local_files_import:folders", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:local_files_import:folders)$", linkType154, false), null, null, map3, linkType154);
        LinkType linkType155 = LinkType.LOCAL_FILES_IMPORT_SONGS;
        je.k(je.N("local_files_import_songs", "spotify:internal:local_files_import:songs", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:local_files_import:songs)$", linkType155, false), null, null, map3, linkType155);
        LinkType linkType156 = LinkType.LOGIN_FACEBOOK;
        je.k(je.N("login_facebook", "spotify:login:facebook", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:login:facebook)$", linkType156, false), null, null, map3, linkType156);
        LinkType linkType157 = LinkType.LOGIN_GOOGLE;
        je.k(je.N("login_google", "spotify:login:google", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:login:google)$", linkType157, false), null, null, map3, linkType157);
        LinkType linkType158 = LinkType.LOGIN_PRELAUNCH_INTEREST;
        je.k(je.N("login_prelaunch_interest", "spotify:login:prelaunch-interest", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:login:prelaunch-interest)$", linkType158, false), null, null, map3, linkType158);
        LinkType linkType159 = LinkType.LOGIN_START;
        je.k(je.N("login_start", "spotify:nux:login-signup", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:nux:login-signup)$", linkType159, false), null, null, map3, linkType159);
        LinkType linkType160 = LinkType.LOGIN_WELCOME;
        je.k(je.N("login_welcome", "spotify:login:welcome", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:login:welcome)$", linkType160, false), null, null, map3, linkType160);
        LinkType linkType161 = LinkType.MADE_FOR_YOU_HUB;
        je.k(je.N("made_for_you_hub", "spotify:made-for-you", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:made-for-you)$", linkType161, false), "exoset", "Uri to access Made for You hub", map3, linkType161);
        LinkType linkType162 = LinkType.MAIN;
        je.k(je.N("main", "spotify:main", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:main)$", linkType162, false), null, null, map3, linkType162);
        LinkType linkType163 = LinkType.MARKETING_FORMATS;
        s52.b O26 = je.O("marketing_formats", "spotify:marketing-formats:test", "spotify:marketing-formats:test-backend", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:marketing-formats:test|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:marketing-formats:test-backend)$", linkType163);
        O26.o(false);
        O26.q("prefab");
        O26.m("Uri for marketing formats features");
        map3.put(linkType163, O26.k());
        LinkType linkType164 = LinkType.MEDIA_SERVICE;
        je.k(je.N("media_service", "spotify:media_service", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:media_service)$", linkType164, false), null, null, map3, linkType164);
        LinkType linkType165 = LinkType.MIXIFY;
        je.k(je.N("mixify", "spotify:mixify:{set_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:mixify:[a-zA-Z0-9]{22})$", linkType165, false), null, null, map3, linkType165);
        LinkType linkType166 = LinkType.MO_PRECACHED_PLAYLIST;
        je.k(je.N("mo_precached_playlist", "spotify:internal:mo:precached-playlist", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:mo:precached-playlist)$", linkType166, false), null, null, map3, linkType166);
        LinkType linkType167 = LinkType.MO_PRECACHED_PLAYLISTS;
        je.k(je.N("mo_precached_playlists", "spotify:internal:mo:precached-playlists", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:mo:precached-playlists)$", linkType167, false), null, null, map3, linkType167);
        LinkType linkType168 = LinkType.NAVIGATION;
        je.k(je.N("navigation", "spotify:navigation", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:navigation)$", linkType168, false), null, null, map3, linkType168);
        LinkType linkType169 = LinkType.NAVIGATION_APPS_SETTINGS;
        map3.put(linkType169, je.P(je.N("navigation_apps_settings", "spotify:navigation-apps:settings", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:navigation-apps:settings)$", linkType169, true), "opx", "Access the settings screen for navigation apps integrated in Spotify", "spotify:navigation-apps:settings"));
        LinkType linkType170 = LinkType.NEW_PLAYLIST;
        s52.b N20 = je.N("new_playlist", "spotify:new:playlist", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:new:playlist)$", linkType170, true);
        N20.q("Playlist Platform Squad");
        N20.m("Start the create new playlist flow.");
        N20.n("spotify:new:playlist");
        N20.l("spotify:new");
        N20.l("spotify:new:album");
        N20.l("spotify:playlist:5yolys8XG4q7YfjYGl5Lff");
        map3.put(linkType170, N20.k());
        LinkType linkType171 = LinkType.NOARGS_CALIFORNIA;
        je.k(je.N("noargs_california", "spotify:noargs-california", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:noargs-california)$", linkType171, false), "app-arch-sto", "Experimental feature for exploring feature patterns", map3, linkType171);
        LinkType linkType172 = LinkType.NOTIFICATION;
        je.k(je.N("notification", "spotify:internal:notification", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:notification)$", linkType172, false), null, null, map3, linkType172);
        LinkType linkType173 = LinkType.NOTIFICATION_INBOX;
        je.k(je.N("notification_inbox", "spotify:app:notification_inbox", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:notification_inbox)$", linkType173, false), null, null, map3, linkType173);
        LinkType linkType174 = LinkType.NOTIFICATION_SETTINGS;
        s52.b N21 = je.N("notification_settings", "spotify:settings:notifications", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:settings:notifications)$", linkType174, true);
        N21.q("reachability");
        N21.m("The notification preferences root screen");
        N21.n("spotify:settings:notifications");
        N21.n("https://open.spotify.com/settings/notifications");
        map3.put(linkType174, N21.k());
        LinkType linkType175 = LinkType.NOTIFICATION_SETTINGS_CATEGORY_DETAILS;
        s52.b N22 = je.N("notification_settings_category_details", "spotify:settings:notifications:category-details:{category as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:settings:notifications:category-details:[^:_#]+)$", linkType175, true);
        N22.q("reachability");
        N22.m("The screen listing all the channels for a given category");
        N22.n("spotify:settings:notifications:category-details:product-news");
        N22.n("https://open.spotify.com/settings/notifications/category-details/new-music");
        map3.put(linkType175, N22.k());
        LinkType linkType176 = LinkType.NOTIFICATION_SETTINGS_CHANNEL_DETAILS;
        s52.b N23 = je.N("notification_settings_channel_details", "spotify:settings:notifications:channel-details:{channel as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:settings:notifications:channel-details:[^:_#]+)$", linkType176, true);
        N23.q("reachability");
        N23.m("The screen listing all the categories for a given channel");
        N23.n("spotify:settings:notifications:channel-details:email");
        N23.n("https://open.spotify.com/settings/notifications/channel-details/push");
        map3.put(linkType176, N23.k());
        LinkType linkType177 = LinkType.OFFLINE_SYNC_ERROR;
        je.k(je.N("offline_sync_error", "spotify:offline_sync_error", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:offline_sync_error)$", linkType177, false), null, null, map3, linkType177);
        LinkType linkType178 = LinkType.ONBOARDING_TOOLTIP;
        je.k(je.N("onboarding_tooltip", "spotify:app:tinkerbell", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:tinkerbell)$", linkType178, false), null, null, map3, linkType178);
        LinkType linkType179 = LinkType.PLAY_DEVICEPICKER;
        map3.put(linkType179, je.P(je.N("play_devicepicker", "spotify:connect-device-picker", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:connect-device-picker)$", linkType179, true), null, "The root of the Device Picker hierarchy", "spotify:connect-device-picker"));
        LinkType linkType180 = LinkType.PLAY_NOWPLAYING;
        map3.put(linkType180, je.P(je.N("play_nowplaying", "spotify:now-playing", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:now-playing)$", linkType180, true), null, "The root of the Now Playing hierarchy", "spotify:now-playing"));
        LinkType linkType181 = LinkType.PLAYER_BAR;
        je.k(je.N("player_bar", "spotify:now-playing-bar", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:now-playing-bar)$", linkType181, false), null, null, map3, linkType181);
        LinkType linkType182 = LinkType.PLAYER_VIEW;
        je.k(je.N("player_view", "spotify:now-playing-view", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:now-playing-view)$", linkType182, false), null, null, map3, linkType182);
        LinkType linkType183 = LinkType.PLAYLIST_AUTOPLAY;
        s52.b bVar15 = new s52.b("playlist_autoplay");
        bVar15.r("spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}:play");
        bVar15.r("spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}:play:{track_id as Base62}");
        bVar15.r("spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}:play:track:{track_id as Base62}");
        bVar15.r("spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}:play:episode:{episode_id as Base62}");
        bVar15.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}:play|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}:play:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}:play:track:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}:play:episode:[a-zA-Z0-9]{22})$");
        bVar15.p(linkType183);
        bVar15.o(false);
        bVar15.q(null);
        bVar15.m(null);
        map3.put(linkType183, bVar15.k());
        LinkType linkType184 = LinkType.PLAYLIST_ENTITY_EXAMPLE;
        s52.b O27 = je.O("playlist_entity_example", "spotify:internal:playlist-entity-example:spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}", "spotify:internal:playlist-entity-example:spotify:playlist:{playlist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:playlist-entity-example:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:playlist-entity-example:[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22})$", linkType184);
        O27.o(false);
        O27.q("playlist-platform");
        O27.m("Uri to reach example implementation of a playlist entity (only in debug)");
        map3.put(linkType184, O27.k());
        LinkType linkType185 = LinkType.PLAYLIST_FORMAT;
        s52.b N24 = je.N("playlist_format", "spotify:playlist-format:{title as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist-format:[^:_#]+)$", linkType185, true);
        je.i(N24, "Playlist Platform Squad", "A Personal Playlist Lookup URI for getting the personal playlist for the current logged in user for the requested playlist type.", "spotify:playlist-format:your-daily-drive", "spotify:playlist-format:discover-weekly");
        N24.l("spotify:playlist-format");
        N24.l("spotify:playlist_format:name");
        N24.l("spotify:playlistformat:name");
        N24.l("spotify:playlist:5yolys8XG4q7YfjYGl5Lff");
        map3.put(linkType185, N24.k());
        LinkType linkType186 = LinkType.PLAYLIST_PARTICIPANTS;
        s52.b N25 = je.N("playlist_participants", "spotify:playlist-participants:{playlist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist-participants:[a-zA-Z0-9]{22})$", linkType186, true);
        je.i(N25, "Playlist Experience", "Playlist Participants Lookup URI for the given playlist.", "spotify:playlist-participants:5yolys8XG4q7YfjYGl5Lff", "spotify:playlist-participants:3HHyioWaQKYgmjAKr9PuIS");
        N25.l("spotify:playlist-participants:5yolys8XG4q7YfjYGl5L_");
        N25.l("spotify:playlist-participants:3HHyioWaQKYgmjAKr9");
        map3.put(linkType186, N25.k());
        LinkType linkType187 = LinkType.PLAYLIST_RADIO;
        je.k(je.N("playlist_radio", "spotify:radio:playlist:{playlist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:playlist:[a-zA-Z0-9]{22})$", linkType187, false), null, null, map3, linkType187);
        LinkType linkType188 = LinkType.PLAYLIST_V2;
        s52.b N26 = je.N("playlist_v2", "spotify:playlist:{playlist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22})$", linkType188, true);
        je.i(N26, "Playlist Platform Squad", "Identifies and links to a playlist.", "spotify:playlist:5yolys8XG4q7YfjYGl5Lff", "spotify:playlist:6krJqHXaP1k9XraZ3G3O5J");
        N26.n("https://open.spotify.com/playlist/6krJqHXaP1k9XraZ3G3O5J");
        N26.l("spotify:playlist:5yolys8XG4q7YfjYGl5L");
        N26.l("spotify:playlist:5yolys8XG4q7YfjYGl5L_f");
        map3.put(linkType188, N26.k());
        LinkType linkType189 = LinkType.PLAYLIST_V2_AUTOPLAY;
        s52.b bVar16 = new s52.b("playlist_v2_autoplay");
        bVar16.r("spotify:playlist:{playlist_id as Base62}:play");
        bVar16.r("spotify:playlist:{playlist_id as Base62}:play:{track_id as Base62}");
        bVar16.r("spotify:playlist:{playlist_id as Base62}:play:track:{track_id as Base62}");
        bVar16.r("spotify:playlist:{playlist_id as Base62}:play:episode:{episode_id as Base62}");
        bVar16.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}:play|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}:play:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}:play:track:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist:[a-zA-Z0-9]{22}:play:episode:[a-zA-Z0-9]{22})$");
        bVar16.p(linkType189);
        bVar16.o(true);
        bVar16.q("Playlist Platform Squad");
        bVar16.m("Identifies and links to a playlist and starts playing it or a specifc track");
        bVar16.n("spotify:playlist:5yolys8XG4q7YfjYGl5Lff:play");
        bVar16.n("spotify:playlist:6krJqHXaP1k9XraZ3G3O5J:play:3JeT6Xcv6MlEHHylk8SKQ1");
        bVar16.l("spotify:playlist:5yolys8XG4q7YfjYGl5L:play");
        bVar16.l("spotify:playlist:6krJqHXaP1k9XraZ3G3O5J:blay");
        map3.put(linkType189, bVar16.k());
        LinkType linkType190 = LinkType.PLAYLIST_WEB_VIEW;
        je.k(je.N("playlist_web_view", "spotify:playlist_web_view", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:playlist_web_view)$", linkType190, false), null, null, map3, linkType190);
        LinkType linkType191 = LinkType.PODCAST_CHARTS_CATEGORIES_REGION;
        s52.b N27 = je.N("podcast_charts_categories_region", "spotify:podcastcharts:categories:{region as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:podcastcharts:categories:[^:_#]+)$", linkType191, true);
        je.i(N27, "spotify for podcasters", "Lists all available categories for a region.", "spotify:podcastcharts:categories:us", "spotify:podcastcharts:categories:fr");
        N27.l("spotify:podcastcharts:categories");
        map3.put(linkType191, N27.k());
        LinkType linkType192 = LinkType.PODCAST_CHARTS_CHART_CATEGORY_REGION_CATEGORY;
        s52.b N28 = je.N("podcast_charts_chart_category_region_category", "spotify:podcastcharts:chart:category:{region as text}:{category as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:podcastcharts:chart:category:[^:_#]+:[^:_#]+)$", linkType192, true);
        je.i(N28, "spotify for podcasters", "Lists category charts for a particular region and category.", "spotify:podcastcharts:chart:category:us:arts", "spotify:podcastcharts:chart:category:us:sports");
        N28.l("spotify:podcastcharts:chart:category");
        N28.l("spotify:podcastcharts:chart:category:us");
        map3.put(linkType192, N28.k());
        LinkType linkType193 = LinkType.PODCAST_CHARTS_CHART_CHART_TYPE_REGION;
        s52.b N29 = je.N("podcast_charts_chart_chart_type_region", "spotify:podcastcharts:chart:{chart_type as text}:{region as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:podcastcharts:chart:[^:_#]+:[^:_#]+)$", linkType193, true);
        je.i(N29, "spotify for podcasters", "Lists Top & Trending charts for a particular region.", "spotify:podcastcharts:chart:top:us", "spotify:podcastcharts:chart:trending:us");
        N29.l("spotify:podcastcharts:chart");
        N29.l("spotify:podcastcharts:chart:top");
        N29.l("spotify:podcastcharts:chart:trending");
        map3.put(linkType193, N29.k());
        LinkType linkType194 = LinkType.PODCAST_CHARTS_REGION;
        s52.b N30 = je.N("podcast_charts_region", "spotify:podcastcharts:region:{region as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:podcastcharts:region:[^:_#]+)$", linkType194, true);
        je.i(N30, "spotify for podcasters", "Viewing a country other than the user's root country.", "spotify:podcastcharts:region:us", "spotify:podcastcharts:region:fr");
        N30.l("spotify:podcastcharts:region");
        map3.put(linkType194, N30.k());
        LinkType linkType195 = LinkType.PODCAST_CHARTS_REGIONS;
        s52.b N31 = je.N("podcast_charts_regions", "spotify:podcastcharts:regions", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:podcastcharts:regions)$", linkType195, true);
        N31.q("spotify for podcasters");
        N31.m("Lists all available regions.");
        N31.n("spotify:podcastcharts:regions");
        N31.l("spotify:podcastcharts:regions:us");
        map3.put(linkType195, N31.k());
        LinkType linkType196 = LinkType.PODCAST_CHARTS_ROOT;
        s52.b N32 = je.N("podcast_charts_root", "spotify:podcastcharts", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:podcastcharts)$", linkType196, true);
        N32.q("spotify for podcasters");
        N32.m("The initial landing page of the user's country.");
        N32.n("spotify:podcastcharts");
        N32.l("spotify:podcastcharts:");
        map3.put(linkType196, N32.k());
        LinkType linkType197 = LinkType.PODCAST_EPISODE;
        s52.b N33 = je.N("podcast_episode", "spotify:internal:podcast:episode:{episode_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:podcast:episode:[a-zA-Z0-9]{22})$", linkType197, false);
        N33.q(null);
        N33.m("A specific episode of a show in the context of a podcast show");
        N33.n("spotify:internal:podcast:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N33.l("spotify:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N33.l("spotify:podcast:episode:");
        N33.l("spotify:internal:podcast");
        N33.l("spotify:internal:podcast:bad");
        N33.l("spotify:internal:podcast:5yolys8XG4q7YfjYGl5L_f");
        map3.put(linkType197, N33.k());
        LinkType linkType198 = LinkType.PODCAST_INTENT_ONBOARDING;
        map3.put(linkType198, je.P(je.N("podcast_intent_onboarding", "spotify:internal:intent-onboarding", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:intent-onboarding)$", linkType198, false), "ignite", "Uri for Podcast Intent Onboarding", "spotify:internal:intent-onboarding"));
        LinkType linkType199 = LinkType.PODCAST_ONBOARDING;
        map3.put(linkType199, je.P(je.N("podcast_onboarding", "spotify:internal:podcast-onboarding", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:podcast-onboarding)$", linkType199, false), "ignite", "Uri for Podcast Onboarding", "spotify:internal:podcast-onboarding"));
        Map<LinkType, s52> map4 = a;
        LinkType linkType200 = LinkType.PODCAST_POLL;
        je.k(je.N("podcast_poll", "spotify:podcast-poll:{poll_id as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:podcast-poll:[^:_#]+)$", linkType200, false), null, null, map4, linkType200);
        LinkType linkType201 = LinkType.PREMIUM_ACTIVATION_CARD;
        je.k(je.N("premium_activation_card", "spotify:premium:activation", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:premium:activation)$", linkType201, false), null, null, map4, linkType201);
        LinkType linkType202 = LinkType.PREMIUM_DESTINATION_DRILLDOWN;
        s52.b N34 = je.N("premium_destination_drilldown", "spotify:premium-page:{page_id as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:premium-page:[^:_#]+)$", linkType202, true);
        N34.q("ACE");
        N34.m("URI of sub-pages for Premium Destination");
        N34.n("spotify:premium-page:premium-plans");
        N34.n("https://open.spotify.com/premium-page/premium-plans");
        map4.put(linkType202, N34.k());
        LinkType linkType203 = LinkType.PREMIUM_HUB;
        je.k(je.N("premium_hub", "spotify:premiumhub", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:premiumhub)$", linkType203, false), null, null, map4, linkType203);
        LinkType linkType204 = LinkType.PREMIUM_IN_APP_DESTINATION;
        s52.b O28 = je.O("premium_in_app_destination", "spotify:premium-destination", "spotify:upsell:premium_in_app_destination", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:premium-destination|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:premium_in_app_destination)$", linkType204);
        O28.o(false);
        O28.q(null);
        O28.m(null);
        map4.put(linkType204, O28.k());
        LinkType linkType205 = LinkType.PREMIUM_SIGNUP;
        je.k(je.N("premium_signup", "spotify:internal:premium_signup", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:premium_signup)$", linkType205, false), null, null, map4, linkType205);
        LinkType linkType206 = LinkType.PROFILE;
        s52.b N35 = je.N("profile", "spotify:user:{user_name as Username}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+)$", linkType206, true);
        je.i(N35, "favorite", "Identifies a user and links to the user's root profile page.", "spotify:user:daniel", "spotify:user:ab%3Fcd");
        N35.n("https://open.spotify.com/user/daniel");
        N35.l("spotify:user:X");
        N35.l("spotify:user::collection");
        map4.put(linkType206, N35.k());
        LinkType linkType207 = LinkType.PROFILE_ARTISTS;
        s52.b N36 = je.N("profile_artists", "spotify:user:{user_name as Username}:artists", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:artists)$", linkType207, true);
        je.i(N36, "favorite", "Links to the Recently Played Artists page or tab of a user's profile.", "spotify:user:daniel:artists", "spotify:user:ab%3Fcd:artists");
        N36.n("https://open.spotify.com/user/ab%3Fcd/artists");
        N36.l("spotify:user:ab?cd:artists");
        N36.l("spotify:user:X:artists");
        N36.l("spotify:user::collection:artists");
        map4.put(linkType207, N36.k());
        LinkType linkType208 = LinkType.PROFILE_FOLLOWERS;
        s52.b N37 = je.N("profile_followers", "spotify:user:{user_name as Username}:followers", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:followers)$", linkType208, true);
        je.i(N37, "favorite", "Links to the Followers page or tab of a user's profile.", "spotify:user:daniel:followers", "spotify:user:ab%3Fcd:followers");
        N37.n("https://open.spotify.com/user/daniel/followers");
        N37.l("spotify:user:ab?cd:followers");
        N37.l("spotify:user:X:followers");
        N37.l("spotify:user::collection:followers");
        map4.put(linkType208, N37.k());
        LinkType linkType209 = LinkType.PROFILE_FOLLOWING;
        s52.b N38 = je.N("profile_following", "spotify:user:{user_name as Username}:following", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:following)$", linkType209, true);
        je.i(N38, "favorite", "Links to the Following page or tab of a user's profile.", "spotify:user:daniel:following", "spotify:user:ab%3Fcd:following");
        N38.n("https://open.spotify.com/user/daniel/following");
        N38.l("spotify:user:ab?cd:following");
        N38.l("spotify:user:X:following");
        N38.l("spotify:user::collection:following");
        map4.put(linkType209, N38.k());
        LinkType linkType210 = LinkType.PROFILE_INVITATION_CODES;
        je.k(je.N("profile_invitation_codes", "spotify:user:{user_name as Username}:invitationcodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:invitationcodes)$", linkType210, false), null, null, map4, linkType210);
        LinkType linkType211 = LinkType.PROFILE_PLAYLIST;
        s52.b N39 = je.N("profile_playlist", "spotify:user:{user_name as Username}:playlist:{playlist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22})$", linkType211, true);
        je.i(N39, "fesk", "Identifies and links to a playlist.", "spotify:user:spotify:playlist:37i9dQZF1DX4JAvHpjipBk", "spotify:user:metaltalks:playlist:6krJqHXaP1k9XraZ3G3O5J");
        N39.n("https://open.spotify.com/user/metaltalks/playlist/6krJqHXaP1k9XraZ3G3O5J");
        N39.l("spotify:user:spotify:playlist:5yolys8XG4q7YfjYGl5L");
        N39.l("spotify:user:spotify:playlist:5yolys8XG4q7YfjYGl5L_f");
        map4.put(linkType211, N39.k());
        LinkType linkType212 = LinkType.PROFILE_PLAYLIST_OVERVIEW;
        s52.b N40 = je.N("profile_playlist_overview", "spotify:user:{user_name as Username}:playlists", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlists)$", linkType212, true);
        je.i(N40, "favorite", "Links to the Public Playlists page or tab of a user's profile.", "spotify:user:daniel:playlists", "spotify:user:ab%3Fcd:playlists");
        N40.n("https://open.spotify.com/user/ab%3Fcd/playlists");
        N40.l("spotify:user:ab?cd:playlists");
        N40.l("spotify:user:X:playlists");
        N40.l("spotify:user::collection:playlists");
        map4.put(linkType212, N40.k());
        LinkType linkType213 = LinkType.PUSH_NOTIFICATION;
        je.k(je.N("push_notification", "spotify:internal:push_notification", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:push_notification)$", linkType213, false), null, null, map4, linkType213);
        LinkType linkType214 = LinkType.PUSH_NOTIFICATION_WEBVIEW;
        je.k(je.N("push_notification_webview", "spotify:internal:notification_webview:{url as URL}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:notification_webview:http(s?)%3[aA]%2[fF]%2[fF]([^\\s]*)?)$", linkType214, false), null, null, map4, linkType214);
        LinkType linkType215 = LinkType.QUEUE;
        je.k(je.N("queue", "spotify:queue", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:queue)$", linkType215, false), null, null, map4, linkType215);
        LinkType linkType216 = LinkType.RADIO_ALBUM;
        s52.b N41 = je.N("radio_album", "spotify:station:album:{album_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:album:[a-zA-Z0-9]{22})$", linkType216, true);
        N41.q(null);
        N41.m("A radio station for a specific album");
        N41.n("spotify:station:album:1CiO0EwK73UWXiAflI5ZSs");
        N41.l("spotify:station:album:");
        map4.put(linkType216, N41.k());
        LinkType linkType217 = LinkType.RADIO_ARTIST;
        s52.b N42 = je.N("radio_artist", "spotify:station:artist:{artist_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:artist:[a-zA-Z0-9]{22})$", linkType217, true);
        N42.q(null);
        N42.m("A radio station for a specific artist");
        N42.n("spotify:station:artist:5WUlDfRSoLAfcVSX1WnrxN");
        N42.l("spotify:station:artist:");
        map4.put(linkType217, N42.k());
        LinkType linkType218 = LinkType.RADIO_GENRE;
        map4.put(linkType218, je.P(je.N("radio_genre", "spotify:station:genre:{radio_slug as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:genre:[^:_#]+)$", linkType218, true), null, "A specific radio genre", "spotify:station:genre:soul"));
        LinkType linkType219 = LinkType.RADIO_PLAYLIST;
        s52.b bVar17 = new s52.b("radio_playlist");
        bVar17.r("spotify:station:user:{user_name as Username}:playlist:{playlist_id as Base62}");
        bVar17.r("spotify:station:playlist:{playlist_id as Base62}");
        bVar17.r("spotify:station:user:{user_name as Username}:top:tracks");
        bVar17.r("spotify:station:user:{user_name as Username}:toplist");
        bVar17.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:top:tracks|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:toplist)$");
        bVar17.p(linkType219);
        bVar17.o(true);
        bVar17.q(null);
        bVar17.m("A radio station for a specific playlist");
        bVar17.n("spotify:station:user:thewhitehouse:playlist:2Zve7PqFSlGl0ojgGnhFTm");
        bVar17.n("spotify:station:playlist:2Zve7PqFSlGl0ojgGnhFTm");
        bVar17.l("spotify:station:user:playlist:");
        map4.put(linkType219, bVar17.k());
        LinkType linkType220 = LinkType.RADIO_ROOT;
        s52.b bVar18 = new s52.b("radio_root");
        bVar18.r("spotify:radio");
        bVar18.r("spotify:app:radio");
        bVar18.r("spotify:internal:radio");
        bVar18.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:radio|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:radio)$");
        bVar18.p(linkType220);
        bVar18.o(true);
        bVar18.q(null);
        bVar18.m("The root of the Radio hierarchy");
        bVar18.n("spotify:radio");
        map4.put(linkType220, bVar18.k());
        LinkType linkType221 = LinkType.RADIO_TRACK;
        s52.b N43 = je.N("radio_track", "spotify:station:track:{track_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:track:[a-zA-Z0-9]{22})$", linkType221, true);
        N43.q(null);
        N43.m("A radio station for a specifc track");
        N43.n("spotify:station:track:6ni0mMZfUJkM7BWj6l5CFx");
        N43.l("spotify:station:track:");
        N43.l("spotify:station:track:6ni0mMZfUJkM7BWj6l5CF_x");
        map4.put(linkType221, N43.k());
        LinkType linkType222 = LinkType.RECENT_SHARES;
        je.k(je.N("recent_shares", "spotify:internal:recent-shares", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:recent-shares)$", linkType222, false), null, null, map4, linkType222);
        LinkType linkType223 = LinkType.REMOTE_CONFIGURATION;
        je.k(je.N("remote_configuration", "spotify:remoteconfiguration", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:remoteconfiguration)$", linkType223, false), "map-props-squad", "Uri for MADProps hidden view to test the integration with new app", map4, linkType223);
        LinkType linkType224 = LinkType.REMOTE_CONTROL;
        je.k(je.N("remote_control", "spotify:remote-control", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:remote-control)$", linkType224, false), null, null, map4, linkType224);
        LinkType linkType225 = LinkType.REMOVE_ALL_EPISODES;
        je.k(je.N("remove_all_episodes", "spotify:remove_all_episodes", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:remove_all_episodes)$", linkType225, false), null, null, map4, linkType225);
        LinkType linkType226 = LinkType.RESOLVE_USER_PLAYLIST;
        s52.b O29 = je.O("resolve_user_playlist", "spotify:link:resolve:userplaylist", "spotify:link:resolve:userplaylist:{title as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:link:resolve:userplaylist|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:link:resolve:userplaylist:[^:_#]+)$", linkType226);
        O29.o(true);
        O29.q("Soundtracks Squad (PZN>LEX)");
        O29.m("Resolve for a user playlist.");
        O29.n("spotify:link:resolve:userplaylist");
        O29.l("spotify:resolve");
        O29.l("spotify:link:resolve");
        O29.l("spotify:link:resolve:playlist");
        O29.l("spotify:link:new:playlist");
        map4.put(linkType226, O29.k());
        LinkType linkType227 = LinkType.RUNNING_CATEGORIES;
        s52.b N44 = je.N("running_categories", "spotify:running:category:{category_slug as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:running:category:[^:_#]+)$", linkType227, true);
        N44.q("x-stream");
        N44.m("A Running playlist with content type category. Similar to running_original_content.");
        N44.n("spotify:running:category:seasonal");
        N44.n("spotify:running:category:latest-running-music");
        map4.put(linkType227, N44.k());
        LinkType linkType228 = LinkType.RUNNING_ORIGINAL_CONTENT;
        s52.b N45 = je.N("running_original_content", "spotify:running:original-content:{category_slug as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:running:original-content:[^:_#]+)$", linkType228, true);
        je.i(N45, "x-stream", "A Running playlist with content type original-content. Similar to running_categories.", "spotify:running:original-content:go", "spotify:running:original-content:escape");
        N45.l("spotify:running:original-content:original:");
        map4.put(linkType228, N45.k());
        LinkType linkType229 = LinkType.RUNNING_ROOT;
        map4.put(linkType229, je.P(je.N("running_root", "spotify:running", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:running)$", linkType229, true), "x-stream", "The root of the running hierarchy within Running on mobile", "spotify:running"));
        LinkType linkType230 = LinkType.SD_STORAGE_ALERT_DIALOG;
        je.k(je.N("sd_storage_alert_dialog", "spotify:sd_storage_alert_dialog", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:sd_storage_alert_dialog)$", linkType230, false), null, null, map4, linkType230);
        LinkType linkType231 = LinkType.SEARCH_DRILL_DOWN;
        s52.b N46 = je.N("search_drill_down", "spotify:search:{section as text}:{query as Query}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:search:[^:_#]+:.*)$", linkType231, true);
        je.i(N46, null, "A specific query in the context of Search drill down", "spotify:search:artist:beiber", "spotify:search:albums:beiber");
        N46.n("spotify:search:playlists:beiber");
        map4.put(linkType231, N46.k());
        LinkType linkType232 = LinkType.SEARCH_QUERY;
        s52.b N47 = je.N("search_query", "spotify:search:{query as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:search:[^:_#]+)$", linkType232, true);
        je.i(N47, null, "A specific query in the context of Search", "spotify:search:bieber", "spotify:search:hallo");
        N47.n("https://open.spotify.com/search/hodor");
        map4.put(linkType232, N47.k());
        LinkType linkType233 = LinkType.SEARCH_ROOT;
        s52.b N48 = je.N("search_root", "spotify:search", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:search)$", linkType233, true);
        N48.q(null);
        N48.m("The root of the Search hierarchy");
        N48.n("spotify:search");
        N48.n("https://open.spotify.com/search");
        map4.put(linkType233, N48.k());
        LinkType linkType234 = LinkType.SETTINGS;
        je.k(je.N("settings", "spotify:config", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:config)$", linkType234, false), null, null, map4, linkType234);
        LinkType linkType235 = LinkType.SHARE;
        je.k(je.N("share", "spotify:share", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:share)$", linkType235, false), null, null, map4, linkType235);
        LinkType linkType236 = LinkType.SHARE_FLOW;
        je.k(je.N("share_flow", "spotify:app:share-flow", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:share-flow)$", linkType236, false), null, null, map4, linkType236);
        LinkType linkType237 = LinkType.SHARE_SPOTIFY;
        je.k(je.N("share_spotify", "spotify:share:spotify", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:share:spotify)$", linkType237, false), null, null, map4, linkType237);
        LinkType linkType238 = LinkType.SHOW_EPISODE;
        s52.b N49 = je.N("show_episode", "spotify:episode:{episode_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:episode:[a-zA-Z0-9]{22})$", linkType238, true);
        N49.q(null);
        N49.m("A specific episode of a show in the context of Show");
        N49.n("spotify:episode:4p6qwHeZbgSQ8V1lys8ZYg");
        N49.l("spotify:episode:");
        N49.l("spotify:episode:bad");
        N49.l("spotify:episode:5yolys8XG4q7YfjYGl5L_f");
        map4.put(linkType238, N49.k());
        LinkType linkType239 = LinkType.SHOW_EPISODE_AUTOPLAY;
        s52.b N50 = je.N("show_episode_autoplay", "spotify:show:{show_id as Base62}:play:episode:{episode_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:show:[a-zA-Z0-9]{22}:play:episode:[a-zA-Z0-9]{22})$", linkType239, true);
        N50.q("Scrabble");
        N50.m("Episode play URI of specific show.");
        N50.n("spotify:show:41L7NjMRf88IvEwicW4vf8:play:episode:59O9IXyn7itIa560AHV3o5");
        N50.l("spotify:show:41L7NjMRf88IvEwicW4vf8:play:episode");
        map4.put(linkType239, N50.k());
        LinkType linkType240 = LinkType.SHOW_EPISODE_SCROLL;
        s52.b N51 = je.N("show_episode_scroll", "spotify:show:{show_id as Base62}:episode:{episode_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:show:[a-zA-Z0-9]{22}:episode:[a-zA-Z0-9]{22})$", linkType240, true);
        N51.q("HomeUX");
        N51.m("Show URI with a specific Episode URI target to scroll to.");
        N51.n("spotify:show:41L7NjMRf88IvEwicW4vf8:episode:59O9IXyn7itIa560AHV3o5");
        N51.l("spotify:show:41L7NjMRf88IvEwicW4vf8:episode");
        map4.put(linkType240, N51.k());
        LinkType linkType241 = LinkType.SHOW_EPISODE_TIMESTAMP;
        s52.b N52 = je.N("show_episode_timestamp", "spotify:episode:{episode_id as Base62}:{offset as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:episode:[a-zA-Z0-9]{22}:[^:_#]+)$", linkType241, true);
        je.i(N52, "Spoderman", "A specific time of a Podcast episode. The offset is expected to be in '[{{hours}}h][{{minutes}}m][{{seconds}}s]' format from the beginning of the track/episode.", "spotify:episode:4p6qwHeZbgSQ8V1lys8ZYg:2m00s", "spotify:episode:4p6qwHeZbgSQ8V1lys8ZYg:0m55s");
        N52.n("spotify:episode:4p6qwHeZbgSQ8V1lys8ZYg:1h00m12s");
        N52.l("spotify:episode:");
        N52.l("spotify:episode:bad");
        N52.l("spotify:episode:5yolys8XG4q7YfjYGl5L_f");
        N52.l("spotify:episode:4p6qwHeZbgSQ8V1lys8ZYg");
        N52.l("spotify:episode:4p6qwHeZbgSQ8V1lys8ZYg:2:02:30");
        map4.put(linkType241, N52.k());
        LinkType linkType242 = LinkType.SHOW_EPISODE_TRACKLIST;
        s52.b N53 = je.N("show_episode_tracklist", "spotify:internal:tracklist:episode:{episode_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:tracklist:episode:[a-zA-Z0-9]{22})$", linkType242, false);
        N53.q(null);
        N53.m("The TrackList Page for an Episode");
        N53.n("spotify:internal:tracklist:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N53.l("spotify:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N53.l("spotify:video:episode:");
        N53.l("spotify:internal:video");
        N53.l("spotify:internal:video:bad");
        N53.l("spotify:internal:video:5yolys8XG4q7YfjYGl5L_f");
        N53.l("spotify:internal:video:episode:1N14ZPZmu4sw62Ry5WnRyS");
        map4.put(linkType242, N53.k());
        LinkType linkType243 = LinkType.SHOW_EPISODE_TRANSCRIPT;
        s52.b N54 = je.N("show_episode_transcript", "spotify:internal:transcript:episode:{episode_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:transcript:episode:[a-zA-Z0-9]{22})$", linkType243, false);
        N54.q(null);
        N54.m("The Transcript Page for an Episode");
        N54.n("spotify:internal:transcript:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N54.l("spotify:internal:tracklist:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N54.l("spotify:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N54.l("spotify:video:episode:");
        N54.l("spotify:internal:video");
        N54.l("spotify:internal:video:bad");
        N54.l("spotify:internal:video:5yolys8XG4q7YfjYGl5L_f");
        N54.l("spotify:internal:video:episode:1N14ZPZmu4sw62Ry5WnRyS");
        map4.put(linkType243, N54.k());
        LinkType linkType244 = LinkType.SHOW_FIND;
        s52.b O30 = je.O("show_find", "spotify:internal:show:find", "spotify:internal:show:find:{show_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:show:find|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:show:find:[a-zA-Z0-9]{22})$", linkType244);
        O30.o(false);
        O30.q(null);
        O30.m("A page where the user can find or search within a podcast show");
        O30.n("spotify:internal:show:find");
        O30.n("spotify:internal:show:find:1N14ZPZmu4sw62Ry5WnRyS");
        O30.l("spotify:internal:show:find:123_bad");
        O30.l("spotify:show:find");
        O30.l("spotify:show:find:1N14ZPZmu4sw62Ry5WnRyS");
        map4.put(linkType244, O30.k());
        LinkType linkType245 = LinkType.SHOW_PODCAST;
        s52.b N55 = je.N("show_podcast", "spotify:internal:podcast:{show_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:podcast:[a-zA-Z0-9]{22})$", linkType245, false);
        N55.q(null);
        N55.m("A specific Podcast instance of a show entity.");
        N55.n("spotify:internal:podcast:1N14ZPZmu4sw62Ry5WnRyS");
        N55.l("spotify:show:");
        N55.l("spotify:podcast:");
        N55.l("spotify:internal:podcast");
        N55.l("spotify:internal:podcast:bad");
        N55.l("spotify:internal:podcast:5yolys8XG4q7YfjYGl5L_f");
        map4.put(linkType245, N55.k());
        LinkType linkType246 = LinkType.SHOW_ROOT;
        s52.b N56 = je.N("show_root", "spotify:shows", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:shows)$", linkType246, true);
        N56.q(null);
        N56.m("The root view of spotify shows (including both videos and podcasts)");
        N56.n("spotify:shows");
        N56.l("spotify:shows:");
        map4.put(linkType246, N56.k());
        LinkType linkType247 = LinkType.SHOW_SHOW;
        s52.b N57 = je.N("show_show", "spotify:show:{show_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:show:[a-zA-Z0-9]{22})$", linkType247, true);
        N57.q(null);
        N57.m("A specific show in the context of Show");
        N57.n("spotify:show:1N14ZPZmu4sw62Ry5WnRyS");
        N57.l("spotify:show:");
        N57.l("spotify:show:bad");
        N57.l("spotify:show:5yolys8XG4q7YfjYGl5L_f");
        map4.put(linkType247, N57.k());
        LinkType linkType248 = LinkType.SHOW_VIDEO;
        s52.b N58 = je.N("show_video", "spotify:internal:video:{show_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:video:[a-zA-Z0-9]{22})$", linkType248, false);
        N58.q(null);
        N58.m("A specific video instance of a show entity.");
        N58.n("spotify:internal:video:6mvrJsCQHn2Hp4dkTsfHl6");
        N58.l("spotify:show:");
        N58.l("spotify:video:");
        N58.l("spotify:internal:video");
        N58.l("spotify:internal:video:bad");
        N58.l("spotify:internal:video:5yolys8XG4q7YfjYGl5L_f");
        map4.put(linkType248, N58.k());
        LinkType linkType249 = LinkType.SIGNUP_V1_LOGIN;
        je.k(je.N("signup_v1_login", "spotify:signup-v1:login", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:signup-v1:login)$", linkType249, false), null, null, map4, linkType249);
        Map<LinkType, s52> map5 = a;
        LinkType linkType250 = LinkType.SIGNUP_V1_SIGNUP;
        je.k(je.N("signup_v1_signup", "spotify:signup-v1:signup", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:signup-v1:signup)$", linkType250, false), null, null, map5, linkType250);
        LinkType linkType251 = LinkType.SIGNUP_V1_START;
        je.k(je.N("signup_v1_start", "spotify:signup-v1:start", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:signup-v1:start)$", linkType251, false), null, null, map5, linkType251);
        LinkType linkType252 = LinkType.SKIP_LIMIT_PIVOT;
        je.k(je.N("skip_limit_pivot", "spotify:skip-limit-pivot", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:skip-limit-pivot)$", linkType252, false), "darwin", "Uri for on-demand playlists experimental feature", map5, linkType252);
        LinkType linkType253 = LinkType.SMARTDEVICELINK;
        je.k(je.N("smartdevicelink", "spotify:app:smartdevicelink", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:smartdevicelink)$", linkType253, false), null, null, map5, linkType253);
        LinkType linkType254 = LinkType.SOCIALSESSION;
        s52.b O31 = je.O("socialsession", "spotify:socialsession", "spotify:socialsession:{session_id as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:socialsession|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:socialsession:[^:_#]+)$", linkType254);
        O31.o(true);
        O31.q("favorite");
        O31.m("Uri to join a social session hosted by another user");
        map5.put(linkType254, O31.k());
        LinkType linkType255 = LinkType.SPECIAL;
        s52.b bVar19 = new s52.b("special");
        bVar19.r("spotify:special:{slug_a as text}");
        bVar19.r("spotify:special:{slug_a as text}:{slug_b as text}");
        bVar19.r("spotify:special:{slug_a as text}:{slug_b as text}:{slug_c as text}");
        bVar19.r("spotify:special:{slug_a as text}:{slug_b as text}:{slug_c as text}:{slug_d as text}");
        bVar19.r("spotify:special:{slug_a as text}:{slug_b as text}:{slug_c as text}:{slug_d as text}:{slug_e as text}");
        bVar19.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:special:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:special:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:special:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:special:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:special:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+)$");
        bVar19.p(linkType255);
        bVar19.o(false);
        je.k(bVar19, null, null, map5, linkType255);
        LinkType linkType256 = LinkType.SPOTIFY;
        je.k(je.N("spotify", "spotify", "^(spotify)$", linkType256, false), null, null, map5, linkType256);
        LinkType linkType257 = LinkType.SPOTIFY_SERVICE;
        je.k(je.N("spotify_service", "spotify:internal:service", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:service)$", linkType257, false), null, null, map5, linkType257);
        LinkType linkType258 = LinkType.START_TRIAL_UPSELL;
        s52.b O32 = je.O("start_trial_upsell", "spotify:upsell:start_trial", "spotify:start_trial_upsell", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:start_trial|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:start_trial_upsell)$", linkType258);
        O32.o(false);
        O32.q(null);
        O32.m(null);
        map5.put(linkType258, O32.k());
        LinkType linkType259 = LinkType.STATION;
        s52.b bVar20 = new s52.b("station");
        bVar20.r("spotify:station:{slug_a as text}");
        bVar20.r("spotify:station:{slug_a as text}:{slug_b as text}");
        bVar20.r("spotify:station:{slug_a as text}:{slug_b as text}:{slug_c as text}");
        bVar20.r("spotify:station:{slug_a as text}:{slug_b as text}:{slug_c as text}:{slug_d as text}");
        bVar20.r("spotify:station:user:{user_name as Username}:{category as text}");
        bVar20.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:[^:_#]+)$");
        bVar20.p(linkType259);
        bVar20.o(false);
        je.k(bVar20, null, null, map5, linkType259);
        LinkType linkType260 = LinkType.STATION_CLUSTER;
        je.k(je.N("station_cluster", "spotify:station:user:{user_name as Username}:cluster:{gid as GidID}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:station:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:cluster:[^:?#]+)$", linkType260, false), null, null, map5, linkType260);
        LinkType linkType261 = LinkType.STATIONS_PROMO;
        je.k(je.N("stations_promo", "spotify:stations-promo", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:stations-promo)$", linkType261, false), "stations", "Uri for Stations promo page that can start the Stations app or help the user install it", map5, linkType261);
        LinkType linkType262 = LinkType.TASTE_ARTIST;
        je.k(je.N("taste_artist", "spotify:internal:taste:artist", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:taste:artist)$", linkType262, false), null, null, map5, linkType262);
        LinkType linkType263 = LinkType.TASTE_GENRE;
        je.k(je.N("taste_genre", "spotify:internal:taste:genre", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:taste:genre)$", linkType263, false), null, null, map5, linkType263);
        LinkType linkType264 = LinkType.TASTE_MIXING;
        je.k(je.N("taste_mixing", "spotify:internal:taste:mixing", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:taste:mixing)$", linkType264, false), null, null, map5, linkType264);
        LinkType linkType265 = LinkType.TASTE_ONBOARDING;
        map5.put(linkType265, je.P(je.N("taste_onboarding", "spotify:internal:taste-onboarding", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:taste-onboarding)$", linkType265, false), "ignite", "Uri for Taste Onboarding", "spotify:internal:taste-onboarding"));
        LinkType linkType266 = LinkType.TASTE_ONBOARDING_TRACKS;
        map5.put(linkType266, je.P(je.N("taste_onboarding_tracks", "spotify:internal:taste-onboarding-tracks", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:taste-onboarding-tracks)$", linkType266, false), "ignite", "Uri for Taste Onboarding track selection", "spotify:internal:taste-onboarding-tracks"));
        LinkType linkType267 = LinkType.TASTE_ONBOARDING_UPDATE;
        map5.put(linkType267, je.P(je.N("taste_onboarding_update", "spotify:internal:taste-onboarding-update", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:taste-onboarding-update)$", linkType267, false), "ignite", "Uri for Taste Onboarding update", "spotify:internal:taste-onboarding-update"));
        LinkType linkType268 = LinkType.TERMS_AND_CONDITIONS_PERMISSIONS;
        je.k(je.N("terms_and_conditions_permissions", "spotify:intro:permissions", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:intro:permissions)$", linkType268, false), null, null, map5, linkType268);
        LinkType linkType269 = LinkType.TERMS_AND_CONDITIONS_TOS;
        je.k(je.N("terms_and_conditions_tos", "spotify:intro:tos:dialog", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:intro:tos:dialog)$", linkType269, false), null, null, map5, linkType269);
        LinkType linkType270 = LinkType.TERMS_AND_CONDITIONS_TOS_TEXT;
        je.k(je.N("terms_and_conditions_tos_text", "spotify:intro:tos:text", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:intro:tos:text)$", linkType270, false), null, null, map5, linkType270);
        LinkType linkType271 = LinkType.TOGETHER;
        je.k(je.N("together", "spotify:together", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:together)$", linkType271, false), "performance-squad", "Spotify Together", map5, linkType271);
        LinkType linkType272 = LinkType.TOPIC;
        map5.put(linkType272, je.P(je.N("topic", "spotify:topic:{id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:topic:[a-zA-Z0-9]{22})$", linkType272, false), "waldo", "A page with topic related content", "spotify:topic:0JQ5WvvFIl4Ju6VoqLJGPT"));
        LinkType linkType273 = LinkType.TOPLIST;
        s52.b bVar21 = new s52.b("toplist");
        bVar21.r("toplist");
        bVar21.r("spotify:user:{user_name as Username}:toplist");
        bVar21.r("spotify:user:{user_name as Username}:top:tracks");
        bVar21.s("^(toplist|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:toplist|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:top:tracks)$");
        bVar21.p(linkType273);
        bVar21.o(false);
        bVar21.q(null);
        bVar21.m(null);
        map5.put(linkType273, bVar21.k());
        LinkType linkType274 = LinkType.TRACK;
        s52.b bVar22 = new s52.b(AppProtocol.TrackData.TYPE_TRACK);
        bVar22.r("spotify:track:{track_id as Base62}");
        bVar22.r("spotify:local:{slug as text}");
        bVar22.r("spotify:local:{slug as text}:{slug as text}");
        bVar22.r("spotify:local:{slug as text}:{slug as text}:{slug as text}");
        bVar22.r("spotify:local:{slug as text}:{slug as text}:{slug as text}:{slug as text}");
        bVar22.r("spotify:local:{slug as text}:{slug as text}:{slug as text}:{slug as text}:{slug as text}");
        bVar22.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:track:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:local:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:local:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:local:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:local:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:local:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+:[^:_#]+)$");
        bVar22.p(linkType274);
        bVar22.o(true);
        bVar22.q("High Intent");
        bVar22.m("The overview page for a specific track");
        bVar22.n("spotify:track:5OQsiBsky2k2kDKy2bX2eT");
        bVar22.n("https://open.spotify.com/track/5OQsiBsky2k2kDKy2bX2eT");
        bVar22.l("spotify:track:");
        bVar22.l("spotify:track:bad");
        bVar22.l("spotify:track:5OQsiBsky2k2kDKy2bX2_T");
        map5.put(linkType274, bVar22.k());
        LinkType linkType275 = LinkType.TRACK_AUTOPLAY;
        je.k(je.N("track_autoplay", "spotify:track:{track_id as Base62}:play", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:track:[a-zA-Z0-9]{22}:play)$", linkType275, false), null, null, map5, linkType275);
        LinkType linkType276 = LinkType.TRACK_RADIO;
        je.k(je.N("track_radio", "spotify:radio:track:{track_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:track:[a-zA-Z0-9]{22})$", linkType276, false), null, null, map5, linkType276);
        LinkType linkType277 = LinkType.TRIAL_REMINDER;
        je.k(je.N("trial_reminder", "spotify:trial_reminder", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:trial_reminder)$", linkType277, false), null, null, map5, linkType277);
        LinkType linkType278 = LinkType.TRIAL_REMINDER_SPOTIFY_FREE;
        je.k(je.N("trial_reminder_spotify_free", "spotify:trial_reminder:spotify_free", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:trial_reminder:spotify_free)$", linkType278, false), null, null, map5, linkType278);
        LinkType linkType279 = LinkType.UPDATE;
        je.k(je.N("update", "spotify:update", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:update)$", linkType279, false), null, null, map5, linkType279);
        LinkType linkType280 = LinkType.UPDATE_EMAIL_ADDRESS;
        map5.put(linkType280, je.P(je.N("update_email_address", "spotify:internal:settings:update-email-address", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:settings:update-email-address)$", linkType280, false), "reachability", "Used to fetch the page that allows users to update/modify their email.", "spotify:internal:settings:update-email-address"));
        LinkType linkType281 = LinkType.UPSELL;
        s52.b O33 = je.O("upsell", "spotify:upsell", "spotify:app:upsell", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:app:upsell)$", linkType281);
        O33.o(false);
        O33.q(null);
        O33.m(null);
        map5.put(linkType281, O33.k());
        LinkType linkType282 = LinkType.UPSELL_ACTIVATING_TRIAL;
        je.k(je.N("upsell_activating_trial", "spotify:upsell:activating_trial", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:activating_trial)$", linkType282, false), null, null, map5, linkType282);
        LinkType linkType283 = LinkType.UPSELL_CAPPING_REACHED;
        je.k(je.N("upsell_capping_reached", "spotify:upsell:capping_reached", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:capping_reached)$", linkType283, false), null, null, map5, linkType283);
        LinkType linkType284 = LinkType.UPSELL_CONFIRM_CONSUMABLE;
        je.k(je.N("upsell_confirm_consumable", "spotify:upsell:confirm_consumable", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:confirm_consumable)$", linkType284, false), null, null, map5, linkType284);
        LinkType linkType285 = LinkType.UPSELL_CONTENT_UNAVAILABLE;
        je.k(je.N("upsell_content_unavailable", "spotify:upsell:content-unavailable", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:content-unavailable)$", linkType285, false), null, null, map5, linkType285);
        LinkType linkType286 = LinkType.UPSELL_EXTREME_QUALITY;
        je.k(je.N("upsell_extreme_quality", "spotify:upsell:choose_extreme_quality", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:choose_extreme_quality)$", linkType286, false), null, null, map5, linkType286);
        LinkType linkType287 = LinkType.UPSELL_INTERSTITIAL_END_OF_TRIAL;
        je.k(je.N("upsell_interstitial_end_of_trial", "spotify:upsell:interstitial:end_of_trial", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:interstitial:end_of_trial)$", linkType287, false), null, null, map5, linkType287);
        LinkType linkType288 = LinkType.UPSELL_NO_OFFLINE;
        je.k(je.N("upsell_no_offline", "spotify:upsell:no_offline", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:no_offline)$", linkType288, false), null, null, map5, linkType288);
        LinkType linkType289 = LinkType.UPSELL_NO_QUEUE;
        je.k(je.N("upsell_no_queue", "spotify:upsell:no_queue", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:no_queue)$", linkType289, false), null, null, map5, linkType289);
        LinkType linkType290 = LinkType.UPSELL_NO_STREAMING;
        je.k(je.N("upsell_no_streaming", "spotify:upsell:no_streaming", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:no_streaming)$", linkType290, false), null, null, map5, linkType290);
        LinkType linkType291 = LinkType.UPSELL_OUT_OF_SKIPS;
        je.k(je.N("upsell_out_of_skips", "spotify:upsell:out_of_skips", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:out_of_skips)$", linkType291, false), null, null, map5, linkType291);
        LinkType linkType292 = LinkType.UPSELL_OUT_OF_SKIPS_CONSUMABLES;
        je.k(je.N("upsell_out_of_skips_consumables", "spotify:upsell:out_of_skips_consumables", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:out_of_skips_consumables)$", linkType292, false), null, null, map5, linkType292);
        LinkType linkType293 = LinkType.UPSELL_OUT_OF_SKIPS_PLUS;
        je.k(je.N("upsell_out_of_skips_plus", "spotify:upsell:out_of_skips_plus", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:out_of_skips_plus)$", linkType293, false), null, null, map5, linkType293);
        LinkType linkType294 = LinkType.UPSELL_PREMIUM_ONLY;
        je.k(je.N("upsell_premium_only", "spotify:upsell:premium_only", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:premium_only)$", linkType294, false), null, null, map5, linkType294);
        LinkType linkType295 = LinkType.UPSELL_SHOWCASE;
        je.k(je.N("upsell_showcase", "spotify:upsell:showcase", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:showcase)$", linkType295, false), null, null, map5, linkType295);
        LinkType linkType296 = LinkType.UPSELL_STUCK_IN_SHUFFLE;
        je.k(je.N("upsell_stuck_in_shuffle", "spotify:upsell:stuck_in_shuffle", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:stuck_in_shuffle)$", linkType296, false), null, null, map5, linkType296);
        LinkType linkType297 = LinkType.UPSELL_TRIAL_ENDED;
        je.k(je.N("upsell_trial_ended", "spotify:upsell:trial-ended", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:trial-ended)$", linkType297, false), null, null, map5, linkType297);
        LinkType linkType298 = LinkType.UPSELL_TRIAL_STARTED;
        je.k(je.N("upsell_trial_started", "spotify:upsell:trial-started", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:upsell:trial-started)$", linkType298, false), null, null, map5, linkType298);
        LinkType linkType299 = LinkType.USER_PLAYLIST_RADIO;
        s52.b bVar23 = new s52.b("user_playlist_radio");
        bVar23.r("spotify:radio:user:{user_name as Username}:{cat as text}:{subcat as text}");
        bVar23.r("spotify:radio:user:{user_name as Username}:playlist:{playlist_id as Base62}");
        bVar23.r("spotify:radio:user:{user_name as Username}:top:tracks");
        bVar23.r("spotify:radio:user:{user_name as Username}:toplist");
        bVar23.s("^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:[^:_#]+:[^:_#]+|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:playlist:[a-zA-Z0-9]{22}|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:top:tracks|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:radio:user:(%[a-zA-Z0-9]{2,3}|[^%A-Z:#?]+)+:toplist)$");
        bVar23.p(linkType299);
        bVar23.o(false);
        bVar23.q(null);
        bVar23.m(null);
        map5.put(linkType299, bVar23.k());
        Map<LinkType, s52> map6 = a;
        LinkType linkType300 = LinkType.VIDEO_DEBUG;
        je.k(je.N("video_debug", "spotify:internal:video_debug", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:video_debug)$", linkType300, false), null, null, map6, linkType300);
        LinkType linkType301 = LinkType.VIDEO_EPISODE;
        s52.b N59 = je.N("video_episode", "spotify:internal:video:episode:{episode_id as Base62}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:video:episode:[a-zA-Z0-9]{22})$", linkType301, false);
        N59.q(null);
        N59.m("A specific episode of a video in the context of a video show");
        N59.n("spotify:internal:video:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N59.l("spotify:episode:1N14ZPZmu4sw62Ry5WnRyS");
        N59.l("spotify:video:episode:");
        N59.l("spotify:internal:video");
        N59.l("spotify:internal:video:bad");
        N59.l("spotify:internal:video:5yolys8XG4q7YfjYGl5L_f");
        map6.put(linkType301, N59.k());
        LinkType linkType302 = LinkType.VIDEO_SERVICE;
        je.k(je.N("video_service", "spotify:video_service", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:video_service)$", linkType302, false), null, null, map6, linkType302);
        LinkType linkType303 = LinkType.VOICE;
        s52.b O34 = je.O("voice", "spotify:voice", "spotify:voice:{feature as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:voice|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:voice:[^:_#]+)$", linkType303);
        O34.o(false);
        O34.q("RollsVoice");
        O34.m("uri for opening the Voice feature in-app");
        O34.n("spotify:voice");
        O34.n("spotify:voice:recommend");
        map6.put(linkType303, O34.k());
        LinkType linkType304 = LinkType.VOICE_ASSISTANTS_SETTINGS;
        map6.put(linkType304, je.P(je.N("voice_assistants_settings", "spotify:internal:settings:voice-assistants-settings", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:internal:settings:voice-assistants-settings)$", linkType304, false), "walkie-talkie", "Access the voice assistans settings screen for linking Spotify account to voice assistants", "spotify:internal:settings:voice-assistants-settings"));
        LinkType linkType305 = LinkType.VOICE_EXPERIMENTS;
        s52.b O35 = je.O("voice_experiments", "spotify:voice-experiments", "spotify:voice-experiments:{feature as text}", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:voice-experiments|[Ss][Pp][Oo][Tt][Ii][Ff][Yy]:voice-experiments:[^:_#]+)$", linkType305);
        O35.o(false);
        O35.q("BackTalk");
        O35.m("uri for opening the experimental Voice features in-app");
        O35.n("spotify:voice-experiments");
        O35.n("spotify:voice-experiments:guessing-dialog");
        O35.n("spotify:voice-experiments:introducer");
        map6.put(linkType305, O35.k());
        LinkType linkType306 = LinkType.VOICE_RESULTS;
        je.k(je.N("voice_results", "spotify:voice-results", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:voice-results)$", linkType306, false), null, null, map6, linkType306);
        LinkType linkType307 = LinkType.WIDGET;
        je.k(je.N("widget", "spotify:widget", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:widget)$", linkType307, false), null, null, map6, linkType307);
        LinkType linkType308 = LinkType.WIFI_ONLY_UPSELL;
        je.k(je.N("wifi_only_upsell", "spotify:wifi_only_upsell", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:wifi_only_upsell)$", linkType308, false), null, null, map6, linkType308);
        LinkType linkType309 = LinkType.WIFIMFT_GROUP3_NO_MORE_TIME;
        je.k(je.N("wifimft_group3_no_more_time", "spotify:wifimft_group3_no_more_time", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:wifimft_group3_no_more_time)$", linkType309, false), null, null, map6, linkType309);
        LinkType linkType310 = LinkType.WRAPPED_DATASTORIES;
        s52.b N60 = je.N("wrapped_datastories", "spotify:datastories:wrapped", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:datastories:wrapped)$", linkType310, true);
        je.i(N60, "mambas", "Wrapped data stories specific for the current logged in user.", "spotify:datastories:wrapped", "https://open.spotify.com/datastories/wrapped");
        N60.n("SPOTIFY:datastories:wrapped");
        N60.l("spotify:datastories-wrapped");
        N60.l("spotify:DATASTORIES:WRAPPED");
        map6.put(linkType310, N60.k());
        LinkType linkType311 = LinkType.WRAPPED_STORIES;
        s52.b N61 = je.N("wrapped_stories", "spotify:wrapped:stories", "^([Ss][Pp][Oo][Tt][Ii][Ff][Yy]:wrapped:stories)$", linkType311, true);
        je.i(N61, "mambas", "Wrapped data stories specific for the current logged in user.", "spotify:wrapped:stories", "https://open.spotify.com/wrapped/stories");
        N61.n("SPOTIFY:wrapped:stories");
        N61.l("spotify:wrapped-stories");
        N61.l("spotify:WRAPPED:STORIES");
        map6.put(linkType311, N61.k());
        UriMatcher uriMatcher = b;
        LinkType linkType312 = LinkType.ACTIVATE;
        uriMatcher.addURI("*", "", 0);
        LinkType linkType313 = LinkType.AD;
        uriMatcher.addURI("*", "ad/*", 2);
        LinkType linkType314 = LinkType.ADD_TO_PLAYLIST;
        uriMatcher.addURI("*", "add_to_playlist", 3);
        LinkType linkType315 = LinkType.ADD_TO_PLAYLIST_BOTTOM_SHEET;
        uriMatcher.addURI("*", "add_to_playlist_bottom_sheet", 4);
        LinkType linkType316 = LinkType.ALBUM;
        uriMatcher.addURI("*", "album/*", 6);
        LinkType linkType317 = LinkType.ALBUM_AUTOPLAY;
        uriMatcher.addURI("*", "album/*/play", 7);
        uriMatcher.addURI("*", "album/*/play/episode/*", 7);
        uriMatcher.addURI("*", "album/*/play/track/*", 7);
        uriMatcher.addURI("*", "album/*/play/*", 7);
        LinkType linkType318 = LinkType.ANNOTATE_DISCARD_CHANGES;
        uriMatcher.addURI("*", "annotate_discard_changes", 10);
        LinkType linkType319 = LinkType.ANNOTATE_PLAYLIST;
        uriMatcher.addURI("*", "annotate_playlist", 11);
        LinkType linkType320 = LinkType.APP_RATER;
        uriMatcher.addURI("*", "app/app_rater", 13);
        LinkType linkType321 = LinkType.APP_PROTOCOL;
        uriMatcher.addURI("*", "app/appprotocol", 12);
        LinkType linkType322 = LinkType.BROWSE_ROOT;
        uriMatcher.addURI("*", "app/browse", 40);
        LinkType linkType323 = LinkType.BROWSE_NEW_RELEASES;
        uriMatcher.addURI("*", "app/browse/new_releases", 38);
        uriMatcher.addURI("*", "app/browse/*", 40);
        uriMatcher.addURI("*", "app/browse/*/*", 40);
        uriMatcher.addURI("*", "app/browse/*/*/*", 40);
        uriMatcher.addURI("*", "app/browse/*/*/*/*", 40);
        uriMatcher.addURI("*", "app/browse/*/*/*/*/*", 40);
        LinkType linkType324 = LinkType.CHARTS_SPECIFIC;
        uriMatcher.addURI("*", "app/chart/*", 49);
        LinkType linkType325 = LinkType.BROWSE_CONCERTS;
        uriMatcher.addURI("*", "app/concerts", 32);
        LinkType linkType326 = LinkType.EVENTS_CONCERT_GROUP;
        uriMatcher.addURI("*", "app/concerts/concert-group", 119);
        LinkType linkType327 = LinkType.FINDFRIENDS;
        uriMatcher.addURI("*", "app/findfriends", 121);
        LinkType linkType328 = LinkType.NOTIFICATION_INBOX;
        uriMatcher.addURI("*", "app/notification_inbox", 172);
        LinkType linkType329 = LinkType.RADIO_ROOT;
        uriMatcher.addURI("*", "app/radio", 219);
        LinkType linkType330 = LinkType.SHARE_FLOW;
        uriMatcher.addURI("*", "app/share-flow", AdvertisementType.BRANDED_DURING_LIVE);
        LinkType linkType331 = LinkType.SMARTDEVICELINK;
        uriMatcher.addURI("*", "app/smartdevicelink", 252);
        LinkType linkType332 = LinkType.ONBOARDING_TOOLTIP;
        uriMatcher.addURI("*", "app/tinkerbell", 177);
        LinkType linkType333 = LinkType.UPSELL;
        uriMatcher.addURI("*", "app/upsell", 280);
        LinkType linkType334 = LinkType.ARTIST;
        uriMatcher.addURI("*", "artist/*", 14);
        LinkType linkType335 = LinkType.ARTIST_ABOUT;
        uriMatcher.addURI("*", "artist/*/about", 15);
        LinkType linkType336 = LinkType.ARTIST_ALBUMS;
        uriMatcher.addURI("*", "artist/*/albums", 16);
        LinkType linkType337 = LinkType.ARTIST_APPEARS_ON;
        uriMatcher.addURI("*", "artist/*/appears-on", 17);
        uriMatcher.addURI("*", "artist/*/appears_on", 17);
        LinkType linkType338 = LinkType.ARTIST_BIOGRAPHY;
        uriMatcher.addURI("*", "artist/*/biography", 19);
        LinkType linkType339 = LinkType.ARTIST_COMPILATIONS;
        uriMatcher.addURI("*", "artist/*/compilations", 20);
        LinkType linkType340 = LinkType.ARTIST_CONCERT;
        uriMatcher.addURI("*", "artist/*/concert", 21);
        LinkType linkType341 = LinkType.ARTIST_CONCERTS;
        uriMatcher.addURI("*", "artist/*/concerts", 22);
        LinkType linkType342 = LinkType.ARTIST_GALLERY;
        uriMatcher.addURI("*", "artist/*/gallery", 23);
        LinkType linkType343 = LinkType.ARTIST_AUTOPLAY;
        uriMatcher.addURI("*", "artist/*/play", 18);
        uriMatcher.addURI("*", "artist/*/play/episode/*", 18);
        uriMatcher.addURI("*", "artist/*/play/track/*", 18);
        uriMatcher.addURI("*", "artist/*/play/*", 18);
        LinkType linkType344 = LinkType.ARTIST_PLAYLISTS;
        uriMatcher.addURI("*", "artist/*/playlists", 24);
        LinkType linkType345 = LinkType.ARTIST_RELATED;
        uriMatcher.addURI("*", "artist/*/related", 26);
        LinkType linkType346 = LinkType.ARTIST_RELEASES;
        uriMatcher.addURI("*", "artist/*/releases", 27);
        LinkType linkType347 = LinkType.ARTIST_SINGLES;
        uriMatcher.addURI("*", "artist/*/singles", 28);
        LinkType linkType348 = LinkType.AUTOLOGIN;
        uriMatcher.addURI("*", "autologin", 29);
        LinkType linkType349 = LinkType.BLEND_INVITATION;
        uriMatcher.addURI("*", "blend/invitation", 30);
        LinkType linkType350 = LinkType.BLEND_TASTE_MATCH;
        uriMatcher.addURI("*", "blend/taste-match/*", 31);
        uriMatcher.addURI("*", "browse", 40);
        LinkType linkType351 = LinkType.CALIFORNIA;
        uriMatcher.addURI("*", "california", 42);
        LinkType linkType352 = LinkType.CAR_MODE_HOME;
        uriMatcher.addURI("*", "car-mode/home", 45);
        LinkType linkType353 = LinkType.CARE_PACKAGE;
        uriMatcher.addURI("*", "care-package", 43);
        LinkType linkType354 = LinkType.CARTHING;
        uriMatcher.addURI("*", "carthing", 44);
        uriMatcher.addURI("*", "chart/*", 49);
        LinkType linkType355 = LinkType.CHARTS_ROOT;
        uriMatcher.addURI("*", "charts", 48);
        LinkType linkType356 = LinkType.CHARTS_ALBUM_SPECIFIC;
        uriMatcher.addURI("*", "charts/album/*", 47);
        uriMatcher.addURI("*", "charts/root", 48);
        LinkType linkType357 = LinkType.CHARTS_SUBPAGE;
        uriMatcher.addURI("*", "charts/*", 50);
        LinkType linkType358 = LinkType.CHURN_LOCKED_STATE;
        uriMatcher.addURI("*", "churn_locked_state", 51);
        LinkType linkType359 = LinkType.COLLECTION_ROOT;
        uriMatcher.addURI("*", "collection", 71);
        LinkType linkType360 = LinkType.COLLECTION_ALBUM_OVERVIEW;
        uriMatcher.addURI("*", "collection/albums", 55);
        LinkType linkType361 = LinkType.COLLECTION_ARTIST_OVERVIEW;
        uriMatcher.addURI("*", "collection/artists", 57);
        UriMatcher uriMatcher2 = b;
        LinkType linkType362 = LinkType.COLLECTION_LISTENLATER_EPISODES;
        uriMatcher2.addURI("*", "collection/listen-later-episodes", 58);
        LinkType linkType363 = LinkType.COLLECTION_NFT_MADE_FOR_YOU;
        uriMatcher2.addURI("*", "collection/nft-made-for-you", 59);
        LinkType linkType364 = LinkType.COLLECTION_OFFLINE_EPISODES;
        uriMatcher2.addURI("*", "collection/offline-episodes", 61);
        LinkType linkType365 = LinkType.COLLECTION_OFFLINED_EPISODES;
        uriMatcher2.addURI("*", "collection/offlined-episodes", 60);
        LinkType linkType366 = LinkType.COLLECTION_ROOTLIST;
        uriMatcher2.addURI("*", "collection/playlists", 72);
        LinkType linkType367 = LinkType.COLLECTION_PODCASTS;
        uriMatcher2.addURI("*", "collection/podcasts", 65);
        LinkType linkType368 = LinkType.COLLECTION_PODCASTS_DOWNLOADS;
        uriMatcher2.addURI("*", "collection/podcasts/downloads", 66);
        LinkType linkType369 = LinkType.COLLECTION_PODCASTS_EPISODES;
        uriMatcher2.addURI("*", "collection/podcasts/episodes", 67);
        LinkType linkType370 = LinkType.COLLECTION_PODCASTS_FOLLOWING;
        uriMatcher2.addURI("*", "collection/podcasts/following", 69);
        LinkType linkType371 = LinkType.COLLECTION_OFFLINE_PODCASTS_EPISODES;
        uriMatcher2.addURI("*", "collection/podcasts/offline", 63);
        LinkType linkType372 = LinkType.COLLECTION_PODCASTS_EPISODES_UNFINISHED;
        uriMatcher2.addURI("*", "collection/podcasts/unfinished", 68);
        LinkType linkType373 = LinkType.COLLECTION_UNPLAYED_PODCASTS_EPISODES;
        uriMatcher2.addURI("*", "collection/podcasts/unplayed", 77);
        LinkType linkType374 = LinkType.COLLECTION_RADIO;
        uriMatcher2.addURI("*", "collection/radio", 70);
        LinkType linkType375 = LinkType.COLLECTION_SEARCH;
        uriMatcher2.addURI("*", "collection/search", 73);
        LinkType linkType376 = LinkType.COLLECTION_SHOWS;
        uriMatcher2.addURI("*", "collection/shows", 74);
        LinkType linkType377 = LinkType.COLLECTION_TRACKS;
        uriMatcher2.addURI("*", "collection/tracks", 75);
        LinkType linkType378 = LinkType.COLLECTION_UNPLAYED_EPISODES;
        uriMatcher2.addURI("*", "collection/unplayed-episodes", 76);
        LinkType linkType379 = LinkType.COLLECTION_VIDEOS;
        uriMatcher2.addURI("*", "collection/videos", 79);
        LinkType linkType380 = LinkType.COLLECTION_UNPLAYED_VIDEOS;
        uriMatcher2.addURI("*", "collection/videos/unplayed", 78);
        LinkType linkType381 = LinkType.COLLECTION_YOUR_EPISODES;
        uriMatcher2.addURI("*", "collection/your-episodes", 80);
        LinkType linkType382 = LinkType.CONCAT;
        uriMatcher2.addURI("*", "concat", 82);
        LinkType linkType383 = LinkType.CONCERT_ENTITY;
        uriMatcher2.addURI("*", "concert/songkick/events/*", 85);
        uriMatcher2.addURI("*", "concert/*", 85);
        LinkType linkType384 = LinkType.BROWSE_CONCERTS;
        uriMatcher2.addURI("*", "concerts", 32);
        LinkType linkType385 = LinkType.CONCERTS_LOCATION_SEARCH;
        uriMatcher2.addURI("*", "concerts/location-search", 83);
        LinkType linkType386 = LinkType.SETTINGS;
        uriMatcher2.addURI("*", "config", AdvertisementType.BRANDED_ON_DEMAND_POST_ROLL);
        LinkType linkType387 = LinkType.EMPLOYEE_PODCASTS;
        uriMatcher2.addURI("*", "config/employee-podcasts", 113);
        LinkType linkType388 = LinkType.CONFIRM_DELETION;
        uriMatcher2.addURI("*", "confirm_deletion", 91);
        LinkType linkType389 = LinkType.PLAY_DEVICEPICKER;
        uriMatcher2.addURI("*", "connect-device-picker", 188);
        LinkType linkType390 = LinkType.CREATE_RENAME_PLAYLIST;
        uriMatcher2.addURI("*", "create_rename_playlist", 99);
        LinkType linkType391 = LinkType.CYOA;
        uriMatcher2.addURI("*", "cyoa/home", 100);
        uriMatcher2.addURI("*", "cyoa/*", 100);
        LinkType linkType392 = LinkType.DAILY_MIX_HUB;
        uriMatcher2.addURI("*", "daily-mix-hub", 102);
        LinkType linkType393 = LinkType.DAILYMIX;
        uriMatcher2.addURI("*", "dailymix/*", 101);
        LinkType linkType394 = LinkType.WRAPPED_DATASTORIES;
        uriMatcher2.addURI("*", "datastories/wrapped", HttpConnection.kErrorHttpFail);
        LinkType linkType395 = LinkType.DELETING_CACHE_DIALOG;
        uriMatcher2.addURI("*", "deleting_cache_dialog", 106);
        LinkType linkType396 = LinkType.BROWSE_DISCOVER;
        uriMatcher2.addURI("*", "discover", 33);
        LinkType linkType397 = LinkType.DISK_ALMOST_FULL;
        uriMatcher2.addURI("*", "disk_almost_full", 109);
        LinkType linkType398 = LinkType.DRIVING_MODE;
        uriMatcher2.addURI("*", "driving", 110);
        LinkType linkType399 = LinkType.DYNAMIC_UPSELL;
        uriMatcher2.addURI("*", "dynamic_upsell", 112);
        LinkType linkType400 = LinkType.EMPLOYEE_PODCASTS_AUTH;
        uriMatcher2.addURI("*", "employee-podcasts/auth-callback/*", 114);
        LinkType linkType401 = LinkType.EPISODE_PREVIEW_PLAYER;
        uriMatcher2.addURI("*", "episode/preview/player", 116);
        uriMatcher2.addURI("*", "episode/preview/player/*", 116);
        LinkType linkType402 = LinkType.EPISODE_PREVIEW_PLAYLIST;
        uriMatcher2.addURI("*", "episode/preview/playlist", 117);
        uriMatcher2.addURI("*", "episode/preview/playlist/*", 117);
        LinkType linkType403 = LinkType.SHOW_EPISODE;
        uriMatcher2.addURI("*", "episode/*", 237);
        LinkType linkType404 = LinkType.EPISODE_AUTOPLAY;
        uriMatcher2.addURI("*", "episode/*/play", 115);
        LinkType linkType405 = LinkType.SHOW_EPISODE_TIMESTAMP;
        uriMatcher2.addURI("*", "episode/*/*", 240);
        LinkType linkType406 = LinkType.EVENTSENDER;
        uriMatcher2.addURI("*", "eventsender", 118);
        LinkType linkType407 = LinkType.FIND;
        uriMatcher2.addURI("*", "find", 120);
        uriMatcher2.addURI("*", "find/*", 120);
        LinkType linkType408 = LinkType.FINDFRIENDS;
        uriMatcher2.addURI("*", "findfriends", 121);
        LinkType linkType409 = LinkType.FOLLOWFEED;
        uriMatcher2.addURI("*", "followfeed", 122);
        LinkType linkType410 = LinkType.FOREVER_FAVORITES;
        uriMatcher2.addURI("*", "forever-favorites", 123);
        LinkType linkType411 = LinkType.FULLSCREEN_VIDEO_PLAYER;
        uriMatcher2.addURI("*", "fullscreen_videoplayer", 130);
        UriMatcher uriMatcher3 = b;
        LinkType linkType412 = LinkType.BROWSE_GENRES;
        uriMatcher3.addURI("*", "genre/*", 34);
        uriMatcher3.addURI("*", "genre/*/*", 34);
        uriMatcher3.addURI("*", "genre/*/*/*", 34);
        uriMatcher3.addURI("*", "genre/*/*/*/*", 34);
        uriMatcher3.addURI("*", "genre/*/*/*/*/*", 34);
        LinkType linkType413 = LinkType.GOLDEN_PATH;
        uriMatcher3.addURI("*", "goldenpath", 132);
        LinkType linkType414 = LinkType.GOLDEN_PATH_AIRPORT;
        uriMatcher3.addURI("*", "goldenpath/airport/top-list", 133);
        uriMatcher3.addURI("*", "goldenpath/goldenpathtutorialstep01", 132);
        uriMatcher3.addURI("*", "goldenpath/goldenpathtutorialstep02", 132);
        uriMatcher3.addURI("*", "goldenpath/reference-top-list", 132);
        uriMatcher3.addURI("*", "goldenpath/toptracks", 132);
        LinkType linkType415 = LinkType.HOME_ROOT;
        uriMatcher3.addURI("*", "home", 135);
        LinkType linkType416 = LinkType.HOME_DRILLDOWN;
        uriMatcher3.addURI("*", "home/*", 134);
        LinkType linkType417 = LinkType.BROWSE_ROOT;
        uriMatcher3.addURI("*", "hub/browse", 40);
        uriMatcher3.addURI("*", "hub/browse/*", 40);
        uriMatcher3.addURI("*", "hub/browse/*/*", 40);
        uriMatcher3.addURI("*", "hub/browse/*/*/*", 40);
        uriMatcher3.addURI("*", "hub/browse/*/*/*/*", 40);
        uriMatcher3.addURI("*", "hub/browse/*/*/*/*/*", 40);
        LinkType linkType418 = LinkType.IMAGE_PICKER;
        uriMatcher3.addURI("*", "image-picker", 136);
        LinkType linkType419 = LinkType.IMAGE_RECS_ROOT;
        uriMatcher3.addURI("*", "image-recs", 137);
        LinkType linkType420 = LinkType.BROWSE_IMAGESET;
        uriMatcher3.addURI("*", "imageset/*", 36);
        LinkType linkType421 = LinkType.ACTIVATE_PREMIUM_TRIAL;
        uriMatcher3.addURI("*", "internal/activate_premium_trial", 1);
        LinkType linkType422 = LinkType.ADS_MIC_PERMISSIONS;
        uriMatcher3.addURI("*", "internal/ads/mic-permissions", 5);
        LinkType linkType423 = LinkType.ALLBOARDING;
        uriMatcher3.addURI("*", "internal/allboarding/origin/*", 9);
        LinkType linkType424 = LinkType.INTERNAL_ARTIST;
        uriMatcher3.addURI("*", "internal/artist/*", 138);
        LinkType linkType425 = LinkType.CATEGORIES_ONBOARDING;
        uriMatcher3.addURI("*", "internal/categories-onboarding", 46);
        LinkType linkType426 = LinkType.COLLECTION_ALBUM_OVERVIEW;
        uriMatcher3.addURI("*", "internal/collection/albums", 55);
        LinkType linkType427 = LinkType.COLLECTION_ARTIST_OVERVIEW;
        uriMatcher3.addURI("*", "internal/collection/artists", 57);
        LinkType linkType428 = LinkType.COLLECTION_OFFLINED_EPISODES;
        uriMatcher3.addURI("*", "internal/collection/offlined-episodes", 60);
        LinkType linkType429 = LinkType.COLLECTION_ROOTLIST;
        uriMatcher3.addURI("*", "internal/collection/playlists", 72);
        LinkType linkType430 = LinkType.COLLECTION_OFFLINE_PODCASTS_EPISODES;
        uriMatcher3.addURI("*", "internal/collection/podcasts/offline", 63);
        LinkType linkType431 = LinkType.COLLECTION_UNPLAYED_PODCASTS_EPISODES;
        uriMatcher3.addURI("*", "internal/collection/podcasts/unplayed", 77);
        LinkType linkType432 = LinkType.COLLECTION_RADIO;
        uriMatcher3.addURI("*", "internal/collection/radio", 70);
        LinkType linkType433 = LinkType.COLLECTION_SHOWS;
        uriMatcher3.addURI("*", "internal/collection/shows", 74);
        LinkType linkType434 = LinkType.COLLECTION_TRACKS;
        uriMatcher3.addURI("*", "internal/collection/tracks", 75);
        LinkType linkType435 = LinkType.COLLECTION_UNPLAYED_EPISODES;
        uriMatcher3.addURI("*", "internal/collection/unplayed-episodes", 76);
        LinkType linkType436 = LinkType.COLLECTION_VIDEOS;
        uriMatcher3.addURI("*", "internal/collection/videos", 79);
        LinkType linkType437 = LinkType.COLLECTION_UNPLAYED_VIDEOS;
        uriMatcher3.addURI("*", "internal/collection/videos/unplayed", 78);
        LinkType linkType438 = LinkType.CONCERTS_WEBVIEW;
        uriMatcher3.addURI("*", "internal/concerts/webview", 84);
        LinkType linkType439 = LinkType.DATA_SAVER_LEARN_MORE;
        uriMatcher3.addURI("*", "internal/data-saver-learn-more", 103);
        LinkType linkType440 = LinkType.DATA_SAVER_OPT_IN;
        uriMatcher3.addURI("*", "internal/data-saver-opt-in", 104);
        LinkType linkType441 = LinkType.DEBUG;
        uriMatcher3.addURI("*", "internal/debug", 105);
        uriMatcher3.addURI("*", "internal/debug/*", 105);
        LinkType linkType442 = LinkType.DEVICES;
        uriMatcher3.addURI("*", "internal/devices", 107);
        LinkType linkType443 = LinkType.DUMMY;
        uriMatcher3.addURI("*", "internal/dummy", 111);
        LinkType linkType444 = LinkType.FORMAT_LIST_CHART;
        uriMatcher3.addURI("*", "internal/format_list_chart/spotify/playlist/*", R.styleable.AppCompatTheme_windowNoTitle);
        LinkType linkType445 = LinkType.FORMAT_LIST_CHART_AUTOPLAY;
        uriMatcher3.addURI("*", "internal/format_list_chart/spotify/playlist/*/play", 125);
        uriMatcher3.addURI("*", "internal/format_list_chart/spotify/user/*", R.styleable.AppCompatTheme_windowNoTitle);
        uriMatcher3.addURI("*", "internal/format_list_chart/spotify/user/*/playlist/*", R.styleable.AppCompatTheme_windowNoTitle);
        uriMatcher3.addURI("*", "internal/format_list_chart/spotify/user/*/playlist/*/play", 125);
        uriMatcher3.addURI("*", "internal/format_list_chart/spotify/user/*/playlist/*/play/track/*", 125);
        uriMatcher3.addURI("*", "internal/format_list_chart/spotify/user/*/top/tracks", R.styleable.AppCompatTheme_windowNoTitle);
        uriMatcher3.addURI("*", "internal/format_list_chart/spotify/user/*/toplist", R.styleable.AppCompatTheme_windowNoTitle);
        uriMatcher3.addURI("*", "internal/format_list_chart/toplist", R.styleable.AppCompatTheme_windowNoTitle);
        LinkType linkType446 = LinkType.FORMAT_LIST_DATA_SAVER;
        uriMatcher3.addURI("*", "internal/format_list_data_saver/spotify/playlist/*", 126);
        uriMatcher3.addURI("*", "internal/format_list_data_saver/spotify/user/*/playlist/*", 126);
        LinkType linkType447 = LinkType.FORMAT_LIST_HOME_MIX;
        uriMatcher3.addURI("*", "internal/format_list_home_mix/spotify/playlist/*", 127);
        uriMatcher3.addURI("*", "internal/format_list_home_mix/spotify/user/*", 127);
        uriMatcher3.addURI("*", "internal/format_list_home_mix/spotify/user/*/playlist/*", 127);
        LinkType linkType448 = LinkType.FORMAT_LIST_PERSONALIZED_SETS;
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/spotify/playlist/*", 128);
        LinkType linkType449 = LinkType.FORMAT_LIST_PERSONALIZED_SETS_AUTOPLAY;
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/spotify/playlist/*/play", 129);
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/spotify/user/*", 128);
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/spotify/user/*/playlist/*", 128);
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/spotify/user/*/playlist/*/play", 129);
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/spotify/user/*/playlist/*/play/track/*", 129);
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/spotify/user/*/top/tracks", 128);
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/spotify/user/*/toplist", 128);
        uriMatcher3.addURI("*", "internal/format_list_personalized_sets/toplist", 128);
        LinkType linkType450 = LinkType.CONNECT;
        uriMatcher3.addURI("*", "internal/gaia", 92);
        LinkType linkType451 = LinkType.CONNECT_ONBOARDING_CONTROL;
        uriMatcher3.addURI("*", "internal/gaia-onboarding-disabled", 95);
        LinkType linkType452 = LinkType.CONNECT_ONBOARDING_POPUP;
        uriMatcher3.addURI("*", "internal/gaia-onboarding-popup", 96);
        LinkType linkType453 = LinkType.CONNECT_ONBOARDING_POPUP_EDUCATIONAL;
        uriMatcher3.addURI("*", "internal/gaia-onboarding-popup-educational", 97);
        LinkType linkType454 = LinkType.CONNECT_DEVICE_PICKER;
        uriMatcher3.addURI("*", "internal/gaia-picker", 93);
        LinkType linkType455 = LinkType.CONNECT_DEVICE_PICKER_MENU;
        uriMatcher3.addURI("*", "internal/gaia-picker-device-menu", 94);
        LinkType linkType456 = LinkType.CONNECT_TRANSFER_POPUP;
        uriMatcher3.addURI("*", "internal/gaia-popup", 98);
        LinkType linkType457 = LinkType.LIKES_HIDDEN_CONTENT;
        uriMatcher3.addURI("*", "internal/hidden-content", 147);
        uriMatcher3.addURI("*", "internal/home", 135);
        LinkType linkType458 = LinkType.PODCAST_INTENT_ONBOARDING;
        uriMatcher3.addURI("*", "internal/intent-onboarding", 197);
        LinkType linkType459 = LinkType.LANGUAGE_AWARE_ONBOARDING;
        uriMatcher3.addURI("*", "internal/language-aware-onboarding", 143);
        LinkType linkType460 = LinkType.LICENSES;
        uriMatcher3.addURI("*", "internal/licenses", 146);
        LinkType linkType461 = LinkType.LOCAL_FILES_IMPORT;
        uriMatcher3.addURI("*", "internal/local_files_import", AppProtocol.PlaybackSpeed.PLAYBACK_SPEED_150);
        UriMatcher uriMatcher4 = b;
        LinkType linkType462 = LinkType.LOCAL_FILES_IMPORT_ALBUMS;
        uriMatcher4.addURI("*", "internal/local_files_import/albums", 151);
        LinkType linkType463 = LinkType.LOCAL_FILES_IMPORT_ARTISTS;
        uriMatcher4.addURI("*", "internal/local_files_import/artists", 152);
        LinkType linkType464 = LinkType.LOCAL_FILES_IMPORT_FOLDERS;
        uriMatcher4.addURI("*", "internal/local_files_import/folders", 153);
        LinkType linkType465 = LinkType.LOCAL_FILES_IMPORT_SONGS;
        uriMatcher4.addURI("*", "internal/local_files_import/songs", 154);
        LinkType linkType466 = LinkType.MO_PRECACHED_PLAYLIST;
        uriMatcher4.addURI("*", "internal/mo/precached-playlist", 165);
        LinkType linkType467 = LinkType.MO_PRECACHED_PLAYLISTS;
        uriMatcher4.addURI("*", "internal/mo/precached-playlists", 166);
        LinkType linkType468 = LinkType.NOTIFICATION;
        uriMatcher4.addURI("*", "internal/notification", 171);
        LinkType linkType469 = LinkType.PUSH_NOTIFICATION_WEBVIEW;
        uriMatcher4.addURI("*", "internal/notification_webview/*", AdvertisementType.ON_DEMAND_POST_ROLL);
        LinkType linkType470 = LinkType.PLAYLIST_ENTITY_EXAMPLE;
        uriMatcher4.addURI("*", "internal/playlist-entity-example/spotify/playlist/*", 181);
        uriMatcher4.addURI("*", "internal/playlist-entity-example/spotify/user/*/playlist/*", 181);
        LinkType linkType471 = LinkType.PODCAST_EPISODE;
        uriMatcher4.addURI("*", "internal/podcast/episode/*", 196);
        LinkType linkType472 = LinkType.SHOW_PODCAST;
        uriMatcher4.addURI("*", "internal/podcast/*", 244);
        LinkType linkType473 = LinkType.PODCAST_ONBOARDING;
        uriMatcher4.addURI("*", "internal/podcast-onboarding", 198);
        LinkType linkType474 = LinkType.CONFIG;
        uriMatcher4.addURI("*", "internal/preferences", 86);
        LinkType linkType475 = LinkType.CONFIG_CONTENT_LANGUAGES;
        uriMatcher4.addURI("*", "internal/preferences/content_languages", 87);
        LinkType linkType476 = LinkType.CONFIG_PUSH_NOTIFICATION;
        uriMatcher4.addURI("*", "internal/preferences/push_notification", 88);
        LinkType linkType477 = LinkType.CONFIG_SAVED_ADS;
        uriMatcher4.addURI("*", "internal/preferences/saved_ads", 89);
        LinkType linkType478 = LinkType.CONFIG_STORAGE;
        uriMatcher4.addURI("*", "internal/preferences/storage", 90);
        LinkType linkType479 = LinkType.PREMIUM_SIGNUP;
        uriMatcher4.addURI("*", "internal/premium_signup", 204);
        LinkType linkType480 = LinkType.PUSH_NOTIFICATION;
        uriMatcher4.addURI("*", "internal/push_notification", AdvertisementType.ON_DEMAND_MID_ROLL);
        LinkType linkType481 = LinkType.RADIO_ROOT;
        uriMatcher4.addURI("*", "internal/radio", 219);
        LinkType linkType482 = LinkType.RECENT_SHARES;
        uriMatcher4.addURI("*", "internal/recent-shares", AdvertisementType.LIVE);
        LinkType linkType483 = LinkType.SPOTIFY_SERVICE;
        uriMatcher4.addURI("*", "internal/service", 256);
        LinkType linkType484 = LinkType.UPDATE_EMAIL_ADDRESS;
        uriMatcher4.addURI("*", "internal/settings/update-email-address", 279);
        LinkType linkType485 = LinkType.VOICE_ASSISTANTS_SETTINGS;
        uriMatcher4.addURI("*", "internal/settings/voice-assistants-settings", 303);
        LinkType linkType486 = LinkType.SHOW_FIND;
        uriMatcher4.addURI("*", "internal/show/find", 243);
        uriMatcher4.addURI("*", "internal/show/find/*", 243);
        LinkType linkType487 = LinkType.HOME_ROOT;
        uriMatcher4.addURI("*", "internal/startpage", 135);
        LinkType linkType488 = LinkType.TASTE_ARTIST;
        uriMatcher4.addURI("*", "internal/taste/artist", 261);
        LinkType linkType489 = LinkType.TASTE_GENRE;
        uriMatcher4.addURI("*", "internal/taste/genre", 262);
        LinkType linkType490 = LinkType.TASTE_MIXING;
        uriMatcher4.addURI("*", "internal/taste/mixing", 263);
        LinkType linkType491 = LinkType.TASTE_ONBOARDING;
        uriMatcher4.addURI("*", "internal/taste-onboarding", 264);
        LinkType linkType492 = LinkType.TASTE_ONBOARDING_TRACKS;
        uriMatcher4.addURI("*", "internal/taste-onboarding-tracks", 265);
        LinkType linkType493 = LinkType.TASTE_ONBOARDING_UPDATE;
        uriMatcher4.addURI("*", "internal/taste-onboarding-update", 266);
        LinkType linkType494 = LinkType.BROWSE_TOPPODCAST;
        uriMatcher4.addURI("*", "internal/top-podcasts-page-v2", 41);
        LinkType linkType495 = LinkType.SHOW_EPISODE_TRACKLIST;
        uriMatcher4.addURI("*", "internal/tracklist/episode/*", 241);
        LinkType linkType496 = LinkType.SHOW_EPISODE_TRANSCRIPT;
        uriMatcher4.addURI("*", "internal/transcript/episode/*", 242);
        LinkType linkType497 = LinkType.VIDEO_EPISODE;
        uriMatcher4.addURI("*", "internal/video/episode/*", 300);
        LinkType linkType498 = LinkType.SHOW_VIDEO;
        uriMatcher4.addURI("*", "internal/video/*", 247);
        LinkType linkType499 = LinkType.VIDEO_DEBUG;
        uriMatcher4.addURI("*", "internal/video_debug", 299);
        LinkType linkType500 = LinkType.TERMS_AND_CONDITIONS_PERMISSIONS;
        uriMatcher4.addURI("*", "intro/permissions", 267);
        LinkType linkType501 = LinkType.TERMS_AND_CONDITIONS_TOS;
        uriMatcher4.addURI("*", "intro/tos/dialog", 268);
        LinkType linkType502 = LinkType.TERMS_AND_CONDITIONS_TOS_TEXT;
        uriMatcher4.addURI("*", "intro/tos/text", 269);
        LinkType linkType503 = LinkType.INVITE_CONFIRMATION;
        uriMatcher4.addURI("*", "invite/confirmation", 139);
        LinkType linkType504 = LinkType.INVITE_HAVE;
        uriMatcher4.addURI("*", "invite/have-invite", 140);
        LinkType linkType505 = LinkType.INVITE_REQUEST;
        uriMatcher4.addURI("*", "invite/request-invite", 141);
        LinkType linkType506 = LinkType.INVITE_START;
        uriMatcher4.addURI("*", "invite/start", 142);
        uriMatcher4.addURI("*", "licenses", 146);
        LinkType linkType507 = LinkType.RESOLVE_USER_PLAYLIST;
        uriMatcher4.addURI("*", "link/resolve/userplaylist", 225);
        uriMatcher4.addURI("*", "link/resolve/userplaylist/*", 225);
        LinkType linkType508 = LinkType.BROWSE_LINK;
        uriMatcher4.addURI("*", "link/*", 37);
        LinkType linkType509 = LinkType.LISTENING_HISTORY;
        uriMatcher4.addURI("*", "listening-history", 148);
        LinkType linkType510 = LinkType.LIVE_EVENT;
        uriMatcher4.addURI("*", "live/*", 149);
        LinkType linkType511 = LinkType.TRACK;
        uriMatcher4.addURI("*", "local/*", 273);
        UriMatcher uriMatcher5 = b;
        uriMatcher5.addURI("*", "local/*/*", 273);
        uriMatcher5.addURI("*", "local/*/*/*", 273);
        uriMatcher5.addURI("*", "local/*/*/*/*", 273);
        uriMatcher5.addURI("*", "local/*/*/*/*/*", 273);
        LinkType linkType512 = LinkType.DISABLE_OFFLINE_MODE;
        uriMatcher5.addURI("*", "login/disable_offline_mode", 108);
        LinkType linkType513 = LinkType.LOGIN_FACEBOOK;
        uriMatcher5.addURI("*", "login/facebook", 155);
        LinkType linkType514 = LinkType.LOGIN_GOOGLE;
        uriMatcher5.addURI("*", "login/google", 156);
        LinkType linkType515 = LinkType.LOGIN_PRELAUNCH_INTEREST;
        uriMatcher5.addURI("*", "login/prelaunch-interest", 157);
        LinkType linkType516 = LinkType.LOGIN_WELCOME;
        uriMatcher5.addURI("*", "login/welcome", 159);
        LinkType linkType517 = LinkType.MADE_FOR_YOU_HUB;
        uriMatcher5.addURI("*", "made-for-you", 160);
        LinkType linkType518 = LinkType.MAIN;
        uriMatcher5.addURI("*", "main", 161);
        LinkType linkType519 = LinkType.MARKETING_FORMATS;
        uriMatcher5.addURI("*", "marketing-formats/test", 162);
        uriMatcher5.addURI("*", "marketing-formats/test-backend", 162);
        LinkType linkType520 = LinkType.MEDIA_SERVICE;
        uriMatcher5.addURI("*", "media_service", 163);
        LinkType linkType521 = LinkType.MIXIFY;
        uriMatcher5.addURI("*", "mixify/*", 164);
        LinkType linkType522 = LinkType.NAVIGATION;
        uriMatcher5.addURI("*", "navigation", 167);
        LinkType linkType523 = LinkType.NAVIGATION_APPS_SETTINGS;
        uriMatcher5.addURI("*", "navigation-apps/settings", 168);
        LinkType linkType524 = LinkType.NEW_PLAYLIST;
        uriMatcher5.addURI("*", "new/playlist", 169);
        LinkType linkType525 = LinkType.BROWSE_RELEASES;
        uriMatcher5.addURI("*", "new-releases", 39);
        LinkType linkType526 = LinkType.NOARGS_CALIFORNIA;
        uriMatcher5.addURI("*", "noargs-california", 170);
        LinkType linkType527 = LinkType.PLAY_NOWPLAYING;
        uriMatcher5.addURI("*", "now-playing", 189);
        LinkType linkType528 = LinkType.PLAYER_BAR;
        uriMatcher5.addURI("*", "now-playing-bar", 178);
        LinkType linkType529 = LinkType.PLAYER_VIEW;
        uriMatcher5.addURI("*", "now-playing-view", 179);
        LinkType linkType530 = LinkType.LOGIN_START;
        uriMatcher5.addURI("*", "nux/login-signup", 158);
        LinkType linkType531 = LinkType.COLLECTION_OFFLINE_LIBRARY;
        uriMatcher5.addURI("*", "offline-library", 62);
        LinkType linkType532 = LinkType.OFFLINE_SYNC_ERROR;
        uriMatcher5.addURI("*", "offline_sync_error", 176);
        LinkType linkType533 = LinkType.ACTIVATE;
        uriMatcher5.addURI("*", "open", 0);
        LinkType linkType534 = LinkType.BROWSE_HUBS;
        uriMatcher5.addURI("*", "page/*", 35);
        LinkType linkType535 = LinkType.PLAYLIST_V2;
        uriMatcher5.addURI("*", "playlist/*", 185);
        LinkType linkType536 = LinkType.PLAYLIST_V2_AUTOPLAY;
        uriMatcher5.addURI("*", "playlist/*/play", 186);
        uriMatcher5.addURI("*", "playlist/*/play/episode/*", 186);
        uriMatcher5.addURI("*", "playlist/*/play/track/*", 186);
        uriMatcher5.addURI("*", "playlist/*/play/*", 186);
        LinkType linkType537 = LinkType.PLAYLIST_FORMAT;
        uriMatcher5.addURI("*", "playlist-format/*", 182);
        LinkType linkType538 = LinkType.PLAYLIST_PARTICIPANTS;
        uriMatcher5.addURI("*", "playlist-participants/*", 183);
        LinkType linkType539 = LinkType.PLAYLIST_WEB_VIEW;
        uriMatcher5.addURI("*", "playlist_web_view", 187);
        LinkType linkType540 = LinkType.COLLECTION_ROOTLIST;
        uriMatcher5.addURI("*", "playlists", 72);
        LinkType linkType541 = LinkType.PODCAST_POLL;
        uriMatcher5.addURI("*", "podcast-poll/*", ContentType.BUMPER);
        LinkType linkType542 = LinkType.PODCAST_CHARTS_ROOT;
        uriMatcher5.addURI("*", "podcastcharts", 195);
        LinkType linkType543 = LinkType.PODCAST_CHARTS_CATEGORIES_REGION;
        uriMatcher5.addURI("*", "podcastcharts/categories/*", 190);
        LinkType linkType544 = LinkType.PODCAST_CHARTS_CHART_CATEGORY_REGION_CATEGORY;
        uriMatcher5.addURI("*", "podcastcharts/chart/category/*/*", 191);
        LinkType linkType545 = LinkType.PODCAST_CHARTS_CHART_CHART_TYPE_REGION;
        uriMatcher5.addURI("*", "podcastcharts/chart/*/*", 192);
        LinkType linkType546 = LinkType.PODCAST_CHARTS_REGION;
        uriMatcher5.addURI("*", "podcastcharts/region/*", 193);
        LinkType linkType547 = LinkType.PODCAST_CHARTS_REGIONS;
        uriMatcher5.addURI("*", "podcastcharts/regions", 194);
        LinkType linkType548 = LinkType.PREMIUM_ACTIVATION_CARD;
        uriMatcher5.addURI("*", "premium/activation", 200);
        LinkType linkType549 = LinkType.PREMIUM_IN_APP_DESTINATION;
        uriMatcher5.addURI("*", "premium-destination", 203);
        LinkType linkType550 = LinkType.PREMIUM_DESTINATION_DRILLDOWN;
        uriMatcher5.addURI("*", "premium-page/*", 201);
        LinkType linkType551 = LinkType.PREMIUM_HUB;
        uriMatcher5.addURI("*", "premiumhub", 202);
        LinkType linkType552 = LinkType.LEGAL_PRIVACYPOLICY;
        uriMatcher5.addURI("*", "privacy-policy", 144);
        LinkType linkType553 = LinkType.QUEUE;
        uriMatcher5.addURI("*", "queue", 214);
        LinkType linkType554 = LinkType.RADIO_ROOT;
        uriMatcher5.addURI("*", "radio", 219);
        LinkType linkType555 = LinkType.ALBUM_RADIO;
        uriMatcher5.addURI("*", "radio/album/*", 8);
        LinkType linkType556 = LinkType.ARTIST_RADIO;
        uriMatcher5.addURI("*", "radio/artist/*", 25);
        LinkType linkType557 = LinkType.GENRE_RADIO;
        uriMatcher5.addURI("*", "radio/genre/*", 131);
        LinkType linkType558 = LinkType.PLAYLIST_RADIO;
        uriMatcher5.addURI("*", "radio/playlist/*", 184);
        LinkType linkType559 = LinkType.TRACK_RADIO;
        uriMatcher5.addURI("*", "radio/track/*", 275);
        LinkType linkType560 = LinkType.USER_PLAYLIST_RADIO;
        uriMatcher5.addURI("*", "radio/user/*/playlist/*", 298);
        uriMatcher5.addURI("*", "radio/user/*/top/tracks", 298);
        uriMatcher5.addURI("*", "radio/user/*/toplist", 298);
        uriMatcher5.addURI("*", "radio/user/*/*/*", 298);
        LinkType linkType561 = LinkType.REMOTE_CONTROL;
        uriMatcher5.addURI("*", "remote-control", 223);
        UriMatcher uriMatcher6 = b;
        LinkType linkType562 = LinkType.REMOTE_CONFIGURATION;
        uriMatcher6.addURI("*", "remoteconfiguration", 222);
        LinkType linkType563 = LinkType.REMOVE_ALL_EPISODES;
        uriMatcher6.addURI("*", "remove_all_episodes", 224);
        LinkType linkType564 = LinkType.RUNNING_ROOT;
        uriMatcher6.addURI("*", "running", 228);
        LinkType linkType565 = LinkType.RUNNING_CATEGORIES;
        uriMatcher6.addURI("*", "running/category/*", 226);
        LinkType linkType566 = LinkType.RUNNING_ORIGINAL_CONTENT;
        uriMatcher6.addURI("*", "running/original-content/*", 227);
        LinkType linkType567 = LinkType.SD_STORAGE_ALERT_DIALOG;
        uriMatcher6.addURI("*", "sd_storage_alert_dialog", 229);
        LinkType linkType568 = LinkType.SEARCH_ROOT;
        uriMatcher6.addURI("*", "search", AdvertisementType.BRANDED_ON_DEMAND_MID_ROLL);
        LinkType linkType569 = LinkType.SEARCH_QUERY;
        uriMatcher6.addURI("*", "search/*", AdvertisementType.BRANDED_ON_DEMAND_PRE_ROLL);
        LinkType linkType570 = LinkType.SEARCH_DRILL_DOWN;
        uriMatcher6.addURI("*", "search/*/*", 230);
        LinkType linkType571 = LinkType.NOTIFICATION_SETTINGS;
        uriMatcher6.addURI("*", "settings/notifications", 173);
        LinkType linkType572 = LinkType.NOTIFICATION_SETTINGS_CATEGORY_DETAILS;
        uriMatcher6.addURI("*", "settings/notifications/category-details/*", 174);
        LinkType linkType573 = LinkType.NOTIFICATION_SETTINGS_CHANNEL_DETAILS;
        uriMatcher6.addURI("*", "settings/notifications/channel-details/*", 175);
        LinkType linkType574 = LinkType.SHARE;
        uriMatcher6.addURI("*", "share", AdvertisementType.BRANDED_AS_CONTENT);
        LinkType linkType575 = LinkType.SHARE_SPOTIFY;
        uriMatcher6.addURI("*", "share/spotify", 236);
        LinkType linkType576 = LinkType.SHOW_SHOW;
        uriMatcher6.addURI("*", "show/*", 246);
        LinkType linkType577 = LinkType.SHOW_EPISODE_SCROLL;
        uriMatcher6.addURI("*", "show/*/episode/*", 239);
        LinkType linkType578 = LinkType.SHOW_EPISODE_AUTOPLAY;
        uriMatcher6.addURI("*", "show/*/play/episode/*", 238);
        LinkType linkType579 = LinkType.SHOW_ROOT;
        uriMatcher6.addURI("*", "shows", 245);
        LinkType linkType580 = LinkType.SIGNUP_V1_LOGIN;
        uriMatcher6.addURI("*", "signup-v1/login", 248);
        LinkType linkType581 = LinkType.SIGNUP_V1_SIGNUP;
        uriMatcher6.addURI("*", "signup-v1/signup", 249);
        LinkType linkType582 = LinkType.SIGNUP_V1_START;
        uriMatcher6.addURI("*", "signup-v1/start", 250);
        LinkType linkType583 = LinkType.SKIP_LIMIT_PIVOT;
        uriMatcher6.addURI("*", "skip-limit-pivot", 251);
        LinkType linkType584 = LinkType.SOCIALSESSION;
        uriMatcher6.addURI("*", "socialsession", 253);
        uriMatcher6.addURI("*", "socialsession/*", 253);
        LinkType linkType585 = LinkType.BROWSE_HUBS;
        uriMatcher6.addURI("*", "space/*", 35);
        LinkType linkType586 = LinkType.SPECIAL;
        uriMatcher6.addURI("*", "special/*", 254);
        uriMatcher6.addURI("*", "special/*/*", 254);
        uriMatcher6.addURI("*", "special/*/*/*", 254);
        uriMatcher6.addURI("*", "special/*/*/*/*", 254);
        uriMatcher6.addURI("*", "special/*/*/*/*/*", 254);
        LinkType linkType587 = LinkType.SPOTIFY;
        uriMatcher6.addURI("*", "spotify", BitmapRenderer.ALPHA_VISIBLE);
        LinkType linkType588 = LinkType.START_TRIAL_UPSELL;
        uriMatcher6.addURI("*", "start_trial_upsell", 257);
        LinkType linkType589 = LinkType.HOME_ROOT;
        uriMatcher6.addURI("*", "startpage", 135);
        LinkType linkType590 = LinkType.RADIO_ALBUM;
        uriMatcher6.addURI("*", "station/album/*", 215);
        LinkType linkType591 = LinkType.RADIO_ARTIST;
        uriMatcher6.addURI("*", "station/artist/*", 216);
        LinkType linkType592 = LinkType.RADIO_GENRE;
        uriMatcher6.addURI("*", "station/genre/*", 217);
        LinkType linkType593 = LinkType.RADIO_PLAYLIST;
        uriMatcher6.addURI("*", "station/playlist/*", 218);
        LinkType linkType594 = LinkType.RADIO_TRACK;
        uriMatcher6.addURI("*", "station/track/*", 220);
        LinkType linkType595 = LinkType.STATION_CLUSTER;
        uriMatcher6.addURI("*", "station/user/*/cluster/*", 260);
        LinkType linkType596 = LinkType.CLUSTER_STATIONS_ROOT;
        uriMatcher6.addURI("*", "station/user/*/clusters", 53);
        uriMatcher6.addURI("*", "station/user/*/playlist/*", 218);
        uriMatcher6.addURI("*", "station/user/*/top/tracks", 218);
        uriMatcher6.addURI("*", "station/user/*/toplist", 218);
        LinkType linkType597 = LinkType.STATION;
        uriMatcher6.addURI("*", "station/user/*/*", 258);
        uriMatcher6.addURI("*", "station/*", 258);
        uriMatcher6.addURI("*", "station/*/*", 258);
        uriMatcher6.addURI("*", "station/*/*/*", 258);
        uriMatcher6.addURI("*", "station/*/*/*/*", 258);
        LinkType linkType598 = LinkType.STATIONS_PROMO;
        uriMatcher6.addURI("*", "stations-promo", 259);
        LinkType linkType599 = LinkType.LEGAL_TERMS;
        uriMatcher6.addURI("*", "terms", 145);
        LinkType linkType600 = LinkType.TOGETHER;
        uriMatcher6.addURI("*", "together", 270);
        LinkType linkType601 = LinkType.BROWSE_TOPPODCAST;
        uriMatcher6.addURI("*", "top-podcasts-page-v2", 41);
        LinkType linkType602 = LinkType.TOPIC;
        uriMatcher6.addURI("*", "topic/*", 271);
        LinkType linkType603 = LinkType.TOPLIST;
        uriMatcher6.addURI("*", "toplist", 272);
        LinkType linkType604 = LinkType.TRACK;
        uriMatcher6.addURI("*", "track/*", 273);
        LinkType linkType605 = LinkType.TRACK_AUTOPLAY;
        uriMatcher6.addURI("*", "track/*/play", 274);
        LinkType linkType606 = LinkType.TRIAL_REMINDER;
        uriMatcher6.addURI("*", "trial_reminder", 276);
        LinkType linkType607 = LinkType.TRIAL_REMINDER_SPOTIFY_FREE;
        uriMatcher6.addURI("*", "trial_reminder/spotify_free", 277);
        LinkType linkType608 = LinkType.UPDATE;
        uriMatcher6.addURI("*", "update", 278);
        LinkType linkType609 = LinkType.UPSELL;
        uriMatcher6.addURI("*", "upsell", 280);
        LinkType linkType610 = LinkType.UPSELL_ACTIVATING_TRIAL;
        uriMatcher6.addURI("*", "upsell/activating_trial", 281);
        LinkType linkType611 = LinkType.UPSELL_CAPPING_REACHED;
        uriMatcher6.addURI("*", "upsell/capping_reached", 282);
        UriMatcher uriMatcher7 = b;
        LinkType linkType612 = LinkType.UPSELL_EXTREME_QUALITY;
        uriMatcher7.addURI("*", "upsell/choose_extreme_quality", 285);
        LinkType linkType613 = LinkType.UPSELL_CONFIRM_CONSUMABLE;
        uriMatcher7.addURI("*", "upsell/confirm_consumable", 283);
        LinkType linkType614 = LinkType.UPSELL_CONTENT_UNAVAILABLE;
        uriMatcher7.addURI("*", "upsell/content-unavailable", 284);
        LinkType linkType615 = LinkType.UPSELL_INTERSTITIAL_END_OF_TRIAL;
        uriMatcher7.addURI("*", "upsell/interstitial/end_of_trial", 286);
        LinkType linkType616 = LinkType.UPSELL_NO_OFFLINE;
        uriMatcher7.addURI("*", "upsell/no_offline", 287);
        LinkType linkType617 = LinkType.UPSELL_NO_QUEUE;
        uriMatcher7.addURI("*", "upsell/no_queue", 288);
        LinkType linkType618 = LinkType.UPSELL_NO_STREAMING;
        uriMatcher7.addURI("*", "upsell/no_streaming", 289);
        LinkType linkType619 = LinkType.UPSELL_OUT_OF_SKIPS;
        uriMatcher7.addURI("*", "upsell/out_of_skips", 290);
        LinkType linkType620 = LinkType.UPSELL_OUT_OF_SKIPS_CONSUMABLES;
        uriMatcher7.addURI("*", "upsell/out_of_skips_consumables", 291);
        LinkType linkType621 = LinkType.UPSELL_OUT_OF_SKIPS_PLUS;
        uriMatcher7.addURI("*", "upsell/out_of_skips_plus", 292);
        LinkType linkType622 = LinkType.PREMIUM_IN_APP_DESTINATION;
        uriMatcher7.addURI("*", "upsell/premium_in_app_destination", 203);
        LinkType linkType623 = LinkType.UPSELL_PREMIUM_ONLY;
        uriMatcher7.addURI("*", "upsell/premium_only", 293);
        LinkType linkType624 = LinkType.UPSELL_SHOWCASE;
        uriMatcher7.addURI("*", "upsell/showcase", 294);
        uriMatcher7.addURI("*", "upsell/start_trial", 257);
        LinkType linkType625 = LinkType.UPSELL_STUCK_IN_SHUFFLE;
        uriMatcher7.addURI("*", "upsell/stuck_in_shuffle", 295);
        LinkType linkType626 = LinkType.UPSELL_TRIAL_ENDED;
        uriMatcher7.addURI("*", "upsell/trial-ended", 296);
        LinkType linkType627 = LinkType.UPSELL_TRIAL_STARTED;
        uriMatcher7.addURI("*", "upsell/trial-started", 297);
        LinkType linkType628 = LinkType.PROFILE;
        uriMatcher7.addURI("*", "user/*", 205);
        LinkType linkType629 = LinkType.PROFILE_ARTISTS;
        uriMatcher7.addURI("*", "user/*/artists", 206);
        LinkType linkType630 = LinkType.CLUSTER;
        uriMatcher7.addURI("*", "user/*/cluster/*", 52);
        LinkType linkType631 = LinkType.COLLECTION_TRACKS;
        uriMatcher7.addURI("*", "user/*/collection", 75);
        LinkType linkType632 = LinkType.COLLECTION_ALBUM;
        uriMatcher7.addURI("*", "user/*/collection/album/*", 54);
        LinkType linkType633 = LinkType.COLLECTION_ARTIST;
        uriMatcher7.addURI("*", "user/*/collection/artist/*", 56);
        LinkType linkType634 = LinkType.COLLECTION_YOUR_EPISODES_CORE;
        uriMatcher7.addURI("*", "user/*/collection/your-episodes", 81);
        LinkType linkType635 = LinkType.COLLECTION_PLAYLIST_FOLDER;
        uriMatcher7.addURI("*", "user/*/folder/*", 64);
        LinkType linkType636 = LinkType.PROFILE_FOLLOWERS;
        uriMatcher7.addURI("*", "user/*/followers", 207);
        LinkType linkType637 = LinkType.PROFILE_FOLLOWING;
        uriMatcher7.addURI("*", "user/*/following", 208);
        LinkType linkType638 = LinkType.PROFILE_INVITATION_CODES;
        uriMatcher7.addURI("*", "user/*/invitationcodes", 209);
        LinkType linkType639 = LinkType.PROFILE_PLAYLIST;
        uriMatcher7.addURI("*", "user/*/playlist/*", 210);
        LinkType linkType640 = LinkType.PLAYLIST_AUTOPLAY;
        uriMatcher7.addURI("*", "user/*/playlist/*/play", 180);
        uriMatcher7.addURI("*", "user/*/playlist/*/play/episode/*", 180);
        uriMatcher7.addURI("*", "user/*/playlist/*/play/track/*", 180);
        uriMatcher7.addURI("*", "user/*/playlist/*/play/*", 180);
        LinkType linkType641 = LinkType.PROFILE_PLAYLIST_OVERVIEW;
        uriMatcher7.addURI("*", "user/*/playlists", AdvertisementType.ON_DEMAND_PRE_ROLL);
        uriMatcher7.addURI("*", "user/*/top/tracks", 272);
        uriMatcher7.addURI("*", "user/*/toplist", 272);
        LinkType linkType642 = LinkType.VIDEO_SERVICE;
        uriMatcher7.addURI("*", "video_service", 301);
        LinkType linkType643 = LinkType.BROWSE_HUBS;
        uriMatcher7.addURI("*", "view/*", 35);
        LinkType linkType644 = LinkType.VOICE;
        uriMatcher7.addURI("*", "voice", 302);
        uriMatcher7.addURI("*", "voice/*", 302);
        LinkType linkType645 = LinkType.VOICE_EXPERIMENTS;
        uriMatcher7.addURI("*", "voice-experiments", 304);
        uriMatcher7.addURI("*", "voice-experiments/*", 304);
        LinkType linkType646 = LinkType.VOICE_RESULTS;
        uriMatcher7.addURI("*", "voice-results", HttpConnection.kErrorHttpBadRange);
        LinkType linkType647 = LinkType.WIDGET;
        uriMatcher7.addURI("*", "widget", HttpConnection.kErrorHttpTooManyRedirects);
        LinkType linkType648 = LinkType.WIFI_ONLY_UPSELL;
        uriMatcher7.addURI("*", "wifi_only_upsell", HttpConnection.kErrorHttpTimeout);
        LinkType linkType649 = LinkType.WIFIMFT_GROUP3_NO_MORE_TIME;
        uriMatcher7.addURI("*", "wifimft_group3_no_more_time", HttpConnection.kErrorHttpBadTransferEncoding);
        LinkType linkType650 = LinkType.WRAPPED_STORIES;
        uriMatcher7.addURI("*", "wrapped/stories", HttpConnection.kErrorHttpGzipDecode);
    }

    public static s52 a(LinkType linkType) {
        return a.get(linkType);
    }

    public static UriMatcher b() {
        return b;
    }
}
